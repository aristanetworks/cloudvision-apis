<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clients on Arista Networks FMP APIs</title><link>https://aristanetworks.github.io/cloudvision-apis/clients/</link><description>Recent content in Clients on Arista Networks FMP APIs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://aristanetworks.github.io/cloudvision-apis/clients/index.xml" rel="self" type="application/rss+xml"/><item><title>Existing Clients</title><link>https://aristanetworks.github.io/cloudvision-apis/clients/existing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aristanetworks.github.io/cloudvision-apis/clients/existing/</guid><description>Arista provides and maintains the following clients:
Language Repository Go https://github.com/aristanetworks/cloudvision-go Python https://github.com/aristanetworks/cloudvision-python</description></item><item><title>Creating a Client</title><link>https://aristanetworks.github.io/cloudvision-apis/clients/creating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aristanetworks.github.io/cloudvision-apis/clients/creating/</guid><description>A major advantage to Protobuf (and gRPC) is the ability to generate language bindings reliably and dependably.
The main gRPC site has tutorials for generating clients in many languages:
Java Node Ruby C#/.Net &amp;hellip; and more There is also an expansive ecosystem, so plenty of languages are supported.
Tooling In general, there are two main components to generating a language binding:
protoc: The protobuf compiler which call the language-specific generator typically installed via a package manager (apt, yum, brew, etc) protoc-gen-{language}: The language-specific generator typically installed with the language&amp;rsquo;s dependency manager, build tool, etc Generating Regardless of language, client generation generally follows a pattern of:</description></item></channel></rss>