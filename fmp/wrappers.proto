// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

// Nilable wrapper messages for repeated scalar types and maps with scalar types

syntax = "proto3";

package fmp;

option go_package = "github.com/aristanetworks/cloudvision-go/api/fmp";

// Wrapper message for `repeated double`.
message RepeatedDouble {
  // The repeated double values.
  repeated double values = 1;
}

// Wrapper message for `repeated float`.
message RepeatedFloat {
  // The repeated float values.
  repeated float values = 1;
}

// Wrapper message for `repeated int64`.
message RepeatedInt64 {
  // The repeated int64 values.
  repeated int64 values = 1;
}

// Wrapper message for `repeated uint64`.
message RepeatedUInt64 {
  // The repeated uint64 values.
  repeated uint64 values = 1;
}

// Wrapper message for `repeated int32`.
message RepeatedInt32 {
  // The repeated int32 values.
  repeated int32 values = 1;
}

// Wrapper message for `repeated uint32`.
message RepeatedUInt32 {
  // The repeated uint32 values.
  repeated uint32 values = 1;
}

// Wrapper message for `repeated bool`.
message RepeatedBool {
  // The repeated bool values.
  repeated bool values = 1;
}

// Wrapper message for `repeated string`.
message RepeatedString {
  // The repeated string values.
  repeated string values = 1;
}

// Wrapper message for `repeated bytes`.
message RepeatedBytes {
  // The repeated bytes values.
  repeated bytes values = 1;
}

// Wrapper message for `map<int64, double>`.
message MapInt64Double {
  // The map<int64, double> values.
  map<int64, double> values = 1;
}

// Wrapper message for `map<int64, float>`.
message MapInt64Float {
  // The map<int64, float> values.
  map<int64, float> values = 1;
}

// Wrapper message for `map<int64, int64>`.
message MapInt64Int64 {
  // The map<int64, int64> values.
  map<int64, int64> values = 1;
}

// Wrapper message for `map<int64, uint64>`.
message MapInt64UInt64 {
  // The map<int64, uint64> values.
  map<int64, uint64> values = 1;
}

// Wrapper message for `map<int64, int32>`.
message MapInt64Int32 {
  // The map<int64, int32> values.
  map<int64, int32> values = 1;
}

// Wrapper message for `map<int64, uint32>`.
message MapInt64UInt32 {
  // The map<int64, uint32> values.
  map<int64, uint32> values = 1;
}

// Wrapper message for `map<int64, bool>`.
message MapInt64Bool {
  // The map<int64, bool> values.
  map<int64, bool> values = 1;
}

// Wrapper message for `map<int64, string>`.
message MapInt64String {
  // The map<int64, string> values.
  map<int64, string> values = 1;
}

// Wrapper message for `map<int64, bytes>`.
message MapInt64Bytes {
  // The map<int64, bytes> values.
  map<int64, bytes> values = 1;
}

// Wrapper message for `map<uint64, double>`.
message MapUInt64Double {
  // The map<uint64, double> values.
  map<uint64, double> values = 1;
}

// Wrapper message for `map<uint64, float>`.
message MapUInt64Float {
  // The map<uint64, float> values.
  map<uint64, float> values = 1;
}

// Wrapper message for `map<uint64, int64>`.
message MapUInt64Int64 {
  // The map<uint64, int64> values.
  map<uint64, int64> values = 1;
}

// Wrapper message for `map<uint64, uint64>`.
message MapUInt64UInt64 {
  // The map<uint64, uint64> values.
  map<uint64, uint64> values = 1;
}

// Wrapper message for `map<uint64, int32>`.
message MapUInt64Int32 {
  // The map<uint64, int32> values.
  map<uint64, int32> values = 1;
}

// Wrapper message for `map<uint64, uint32>`.
message MapUInt64UInt32 {
  // The map<uint64, uint32> values.
  map<uint64, uint32> values = 1;
}

// Wrapper message for `map<uint64, bool>`.
message MapUInt64Bool {
  // The map<uint64, bool> values.
  map<uint64, bool> values = 1;
}

// Wrapper message for `map<uint64, string>`.
message MapUInt64String {
  // The map<uint64, string> values.
  map<uint64, string> values = 1;
}

// Wrapper message for `map<uint64, bytes>`.
message MapUInt64Bytes {
  // The map<uint64, bytes> values.
  map<uint64, bytes> values = 1;
}

// Wrapper message for `map<int32, double>`.
message MapInt32Double {
  // The map<int32, double> values.
  map<int32, double> values = 1;
}

// Wrapper message for `map<int32, float>`.
message MapInt32Float {
  // The map<int32, float> values.
  map<int32, float> values = 1;
}

// Wrapper message for `map<int32, int64>`.
message MapInt32Int64 {
  // The map<int32, int64> values.
  map<int32, int64> values = 1;
}

// Wrapper message for `map<int32, uint64>`.
message MapInt32UInt64 {
  // The map<int32, uint64> values.
  map<int32, uint64> values = 1;
}

// Wrapper message for `map<int32, int32>`.
message MapInt32Int32 {
  // The map<int32, int32> values.
  map<int32, int32> values = 1;
}

// Wrapper message for `map<int32, uint32>`.
message MapInt32UInt32 {
  // The map<int32, uint32> values.
  map<int32, uint32> values = 1;
}

// Wrapper message for `map<int32, bool>`.
message MapInt32Bool {
  // The map<int32, bool> values.
  map<int32, bool> values = 1;
}

// Wrapper message for `map<int32, string>`.
message MapInt32String {
  // The map<int32, string> values.
  map<int32, string> values = 1;
}

// Wrapper message for `map<int32, bytes>`.
message MapInt32Bytes {
  // The map<int32, bytes> values.
  map<int32, bytes> values = 1;
}

// Wrapper message for `map<uint32, double>`.
message MapUInt32Double {
  // The map<uint32, double> values.
  map<uint32, double> values = 1;
}

// Wrapper message for `map<uint32, float>`.
message MapUInt32Float {
  // The map<uint32, float> values.
  map<uint32, float> values = 1;
}

// Wrapper message for `map<uint32, int64>`.
message MapUInt32Int64 {
  // The map<uint32, int64> values.
  map<uint32, int64> values = 1;
}

// Wrapper message for `map<uint32, uint64>`.
message MapUInt32UInt64 {
  // The map<uint32, uint64> values.
  map<uint32, uint64> values = 1;
}

// Wrapper message for `map<uint32, int32>`.
message MapUInt32Int32 {
  // The map<uint32, int32> values.
  map<uint32, int32> values = 1;
}

// Wrapper message for `map<uint32, uint32>`.
message MapUInt32UInt32 {
  // The map<uint32, uint32> values.
  map<uint32, uint32> values = 1;
}

// Wrapper message for `map<uint32, bool>`.
message MapUInt32Bool {
  // The map<uint32, bool> values.
  map<uint32, bool> values = 1;
}

// Wrapper message for `map<uint32, string>`.
message MapUInt32String {
  // The map<uint32, string> values.
  map<uint32, string> values = 1;
}

// Wrapper message for `map<uint32, bytes>`.
message MapUInt32Bytes {
  // The map<uint32, bytes> values.
  map<uint32, bytes> values = 1;
}

// Wrapper message for `map<bool, double>`.
message MapBoolDouble {
  // The map<bool, double> values.
  map<bool, double> values = 1;
}

// Wrapper message for `map<bool, float>`.
message MapBoolFloat {
  // The map<bool, float> values.
  map<bool, float> values = 1;
}

// Wrapper message for `map<bool, int64>`.
message MapBoolInt64 {
  // The map<bool, int64> values.
  map<bool, int64> values = 1;
}

// Wrapper message for `map<bool, uint64>`.
message MapBoolUInt64 {
  // The map<bool, uint64> values.
  map<bool, uint64> values = 1;
}

// Wrapper message for `map<bool, int32>`.
message MapBoolInt32 {
  // The map<bool, int32> values.
  map<bool, int32> values = 1;
}

// Wrapper message for `map<bool, uint32>`.
message MapBoolUInt32 {
  // The map<bool, uint32> values.
  map<bool, uint32> values = 1;
}

// Wrapper message for `map<bool, bool>`.
message MapBoolBool {
  // The map<bool, bool> values.
  map<bool, bool> values = 1;
}

// Wrapper message for `map<bool, string>`.
message MapBoolString {
  // The map<bool, string> values.
  map<bool, string> values = 1;
}

// Wrapper message for `map<bool, bytes>`.
message MapBoolBytes {
  // The map<bool, bytes> values.
  map<bool, bytes> values = 1;
}

// Wrapper message for `map<string, double>`.
message MapStringDouble {
  // The map<string, double> values.
  map<string, double> values = 1;
}

// Wrapper message for `map<string, float>`.
message MapStringFloat {
  // The map<string, float> values.
  map<string, float> values = 1;
}

// Wrapper message for `map<string, int64>`.
message MapStringInt64 {
  // The map<string, int64> values.
  map<string, int64> values = 1;
}

// Wrapper message for `map<string, uint64>`.
message MapStringUInt64 {
  // The map<string, uint64> values.
  map<string, uint64> values = 1;
}

// Wrapper message for `map<string, int32>`.
message MapStringInt32 {
  // The map<string, int32> values.
  map<string, int32> values = 1;
}

// Wrapper message for `map<string, uint32>`.
message MapStringUInt32 {
  // The map<string, uint32> values.
  map<string, uint32> values = 1;
}

// Wrapper message for `map<string, bool>`.
message MapStringBool {
  // The map<string, bool> values.
  map<string, bool> values = 1;
}

// Wrapper message for `map<string, string>`.
message MapStringString {
  // The map<string, string> values.
  map<string, string> values = 1;
}

// Wrapper message for `map<string, bytes>`.
message MapStringBytes {
  // The map<string, bytes> values.
  map<string, bytes> values = 1;
}
