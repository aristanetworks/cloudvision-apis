// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.changecontrol.v1;
option go_package = "arista/resources/arista/changecontrol.v1;changecontrol";

import "arista/changecontrol.v1/changecontrol.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message MetaResponse {
	// Time holds the timestamp of the last item included in the metadata calculation.
	google.protobuf.Timestamp time = 1;

	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 2;

	// Count is the number of items present under the conditions of the request.
	google.protobuf.UInt32Value count = 3;
};

message ApproveConfigRequest {
	// Key uniquely identifies a ApproveConfig instance to retrieve.
	// This value must be populated.
	ChangeControlKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ApproveConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ApproveConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ApproveConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ApproveConfigSomeRequest {
	repeated ChangeControlKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ApproveConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ApproveConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message ApproveConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ApproveConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ApproveConfig at end.
	//     * Each ApproveConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each ApproveConfig at start, followed by updates until now.
	//     * Each ApproveConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ApproveConfig at start, followed by updates
	//     until end.
	//     * Each ApproveConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ApproveConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ApproveConfig value = 1;

	// Time holds the timestamp of this ApproveConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ApproveConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message ApproveConfigSetRequest {
	// ApproveConfig carries the value to set into the datastore.
	// See the documentation on the ApproveConfig struct for which fields are required.
	ApproveConfig value = 1;
};

message ApproveConfigSetResponse {
	// Value carries all the values given in the ApproveConfigSetRequest as well
	// as any server-generated values.
	ApproveConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ApproveConfigSetSomeRequest {
	// value contains a list of ApproveConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated ApproveConfig values = 1;
};

message ApproveConfigSetSomeResponse {
	ChangeControlKey key = 1;
	string error = 2;
};

message ApproveConfigDeleteRequest {
	// Key indicates which ApproveConfig instance to remove.
	// This field must always be set.
	ChangeControlKey key = 1;
};

message ApproveConfigDeleteResponse {
	// Key echoes back the key of the deleted ApproveConfig instance.
	ChangeControlKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ApproveConfigDeleteSomeRequest {
	// key contains a list of ApproveConfig keys to delete
	repeated ChangeControlKey keys = 1;
};

// ApproveConfigDeleteSomeResponse is only sent when there is an error.
message ApproveConfigDeleteSomeResponse {
	ChangeControlKey key = 1;
	string error = 2;
};

message ApproveConfigDeleteAllRequest {
};

message ApproveConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the ApproveConfig instance that failed to be deleted.
	ChangeControlKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service ApproveConfigService {
	rpc GetOne (ApproveConfigRequest) returns (ApproveConfigResponse);
	rpc GetSome (ApproveConfigSomeRequest) returns (stream ApproveConfigSomeResponse);
	rpc GetAll (ApproveConfigStreamRequest) returns (stream ApproveConfigStreamResponse);
	rpc Subscribe (ApproveConfigStreamRequest) returns (stream ApproveConfigStreamResponse);
	rpc GetMeta (ApproveConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (ApproveConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (ApproveConfigSetRequest) returns (ApproveConfigSetResponse);
	rpc SetSome (ApproveConfigSetSomeRequest) returns (stream ApproveConfigSetSomeResponse);
	rpc Delete (ApproveConfigDeleteRequest) returns (ApproveConfigDeleteResponse);
	rpc DeleteSome (ApproveConfigDeleteSomeRequest) returns (stream ApproveConfigDeleteSomeResponse);
	rpc DeleteAll (ApproveConfigDeleteAllRequest) returns (stream ApproveConfigDeleteAllResponse);
}

message ChangeControlRequest {
	// Key uniquely identifies a ChangeControl instance to retrieve.
	// This value must be populated.
	ChangeControlKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ChangeControl value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ChangeControl instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlSomeRequest {
	repeated ChangeControlKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ChangeControl value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message ChangeControlStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ChangeControl partial_eq_filter = 1;
	// For each ChangeControl in the list, all populated fields are considered ANDed together
	// as a filtering operation. Similarly, the list itself is ORed such that any individual
	// filter that matches a given ChangeControl is streamed to the user.
	Filter filter = 2;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ChangeControl at end.
	//     * Each ChangeControl response is fully-specified (all fields set).
	//   * start: Returns the state of each ChangeControl at start, followed by updates until now.
	//     * Each ChangeControl response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ChangeControl at start, followed by updates
	//     until end.
	//     * Each ChangeControl response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ChangeControlStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ChangeControl value = 1;

	// Time holds the timestamp of this ChangeControl's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ChangeControl value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service ChangeControlService {
	rpc GetOne (ChangeControlRequest) returns (ChangeControlResponse);
	rpc GetSome (ChangeControlSomeRequest) returns (stream ChangeControlSomeResponse);
	rpc GetAll (ChangeControlStreamRequest) returns (stream ChangeControlStreamResponse);
	rpc Subscribe (ChangeControlStreamRequest) returns (stream ChangeControlStreamResponse);
	rpc GetMeta (ChangeControlStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (ChangeControlStreamRequest) returns (stream MetaResponse);
}

message ChangeControlConfigRequest {
	// Key uniquely identifies a ChangeControlConfig instance to retrieve.
	// This value must be populated.
	ChangeControlKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ChangeControlConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ChangeControlConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlConfigSomeRequest {
	repeated ChangeControlKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ChangeControlConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message ChangeControlConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ChangeControlConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ChangeControlConfig at end.
	//     * Each ChangeControlConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each ChangeControlConfig at start, followed by updates until now.
	//     * Each ChangeControlConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ChangeControlConfig at start, followed by updates
	//     until end.
	//     * Each ChangeControlConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ChangeControlConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ChangeControlConfig value = 1;

	// Time holds the timestamp of this ChangeControlConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ChangeControlConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message ChangeControlConfigSetRequest {
	// ChangeControlConfig carries the value to set into the datastore.
	// See the documentation on the ChangeControlConfig struct for which fields are required.
	ChangeControlConfig value = 1;
};

message ChangeControlConfigSetResponse {
	// Value carries all the values given in the ChangeControlConfigSetRequest as well
	// as any server-generated values.
	ChangeControlConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ChangeControlConfigSetSomeRequest {
	// value contains a list of ChangeControlConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated ChangeControlConfig values = 1;
};

message ChangeControlConfigSetSomeResponse {
	ChangeControlKey key = 1;
	string error = 2;
};

message ChangeControlConfigDeleteRequest {
	// Key indicates which ChangeControlConfig instance to remove.
	// This field must always be set.
	ChangeControlKey key = 1;
};

message ChangeControlConfigDeleteResponse {
	// Key echoes back the key of the deleted ChangeControlConfig instance.
	ChangeControlKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ChangeControlConfigDeleteSomeRequest {
	// key contains a list of ChangeControlConfig keys to delete
	repeated ChangeControlKey keys = 1;
};

// ChangeControlConfigDeleteSomeResponse is only sent when there is an error.
message ChangeControlConfigDeleteSomeResponse {
	ChangeControlKey key = 1;
	string error = 2;
};

message ChangeControlConfigDeleteAllRequest {
};

message ChangeControlConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the ChangeControlConfig instance that failed to be deleted.
	ChangeControlKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service ChangeControlConfigService {
	rpc GetOne (ChangeControlConfigRequest) returns (ChangeControlConfigResponse);
	rpc GetSome (ChangeControlConfigSomeRequest) returns (stream ChangeControlConfigSomeResponse);
	rpc GetAll (ChangeControlConfigStreamRequest) returns (stream ChangeControlConfigStreamResponse);
	rpc Subscribe (ChangeControlConfigStreamRequest) returns (stream ChangeControlConfigStreamResponse);
	rpc GetMeta (ChangeControlConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (ChangeControlConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (ChangeControlConfigSetRequest) returns (ChangeControlConfigSetResponse);
	rpc SetSome (ChangeControlConfigSetSomeRequest) returns (stream ChangeControlConfigSetSomeResponse);
	rpc Delete (ChangeControlConfigDeleteRequest) returns (ChangeControlConfigDeleteResponse);
	rpc DeleteSome (ChangeControlConfigDeleteSomeRequest) returns (stream ChangeControlConfigDeleteSomeResponse);
	rpc DeleteAll (ChangeControlConfigDeleteAllRequest) returns (stream ChangeControlConfigDeleteAllResponse);
}
