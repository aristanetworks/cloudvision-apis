// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.changecontrol.v1;
option go_package = "arista/resources/arista/changecontrol.v1;changecontrol";

import "arista/changecontrol.v1/changecontrol.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "google/protobuf/timestamp.proto";

message ApproveConfigRequest {
	// Key uniquely identifies a ApproveConfig instance to retrieve.
	// This value must be populated.
	ChangeControlKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ApproveConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ApproveConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ApproveConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ApproveConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ApproveConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ApproveConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ApproveConfig value = 1;

	// Time holds the timestamp of this ApproveConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ApproveConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message ApproveConfigSetRequest {
	// ApproveConfig carries the value to set into the datastore.
	// See the documentation on the ApproveConfig struct for which fields are required.
	ApproveConfig value = 1;
};

message ApproveConfigSetResponse {
	// Value carries all the values given in the ApproveConfigSetRequest as well
	// as any server-generated values.
	ApproveConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ApproveConfigDeleteRequest {
	// Key indicates which ApproveConfig instance to remove.
	// This field must always be set.
	ChangeControlKey key = 1;
};

message ApproveConfigDeleteResponse {
	// Key echoes back the key of the deleted ApproveConfig instance.
	ChangeControlKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

service ApproveConfigService {
	rpc GetOne (ApproveConfigRequest) returns (ApproveConfigResponse);
	rpc GetAll (ApproveConfigStreamRequest) returns (stream ApproveConfigStreamResponse);
	rpc Subscribe (ApproveConfigStreamRequest) returns (stream ApproveConfigStreamResponse);
	rpc Set (ApproveConfigSetRequest) returns (ApproveConfigSetResponse);
	rpc Delete (ApproveConfigDeleteRequest) returns (ApproveConfigDeleteResponse);
}

message ChangeControlRequest {
	// Key uniquely identifies a ChangeControl instance to retrieve.
	// This value must be populated.
	ChangeControlKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ChangeControl value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ChangeControl instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ChangeControl partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ChangeControlStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ChangeControl value = 1;

	// Time holds the timestamp of this ChangeControl's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ChangeControl value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service ChangeControlService {
	rpc GetOne (ChangeControlRequest) returns (ChangeControlResponse);
	rpc GetAll (ChangeControlStreamRequest) returns (stream ChangeControlStreamResponse);
	rpc Subscribe (ChangeControlStreamRequest) returns (stream ChangeControlStreamResponse);
}

message ChangeControlConfigRequest {
	// Key uniquely identifies a ChangeControlConfig instance to retrieve.
	// This value must be populated.
	ChangeControlKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ChangeControlConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ChangeControlConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ChangeControlConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ChangeControlConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ChangeControlConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ChangeControlConfig value = 1;

	// Time holds the timestamp of this ChangeControlConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ChangeControlConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message ChangeControlConfigSetRequest {
	// ChangeControlConfig carries the value to set into the datastore.
	// See the documentation on the ChangeControlConfig struct for which fields are required.
	ChangeControlConfig value = 1;
};

message ChangeControlConfigSetResponse {
	// Value carries all the values given in the ChangeControlConfigSetRequest as well
	// as any server-generated values.
	ChangeControlConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ChangeControlConfigDeleteRequest {
	// Key indicates which ChangeControlConfig instance to remove.
	// This field must always be set.
	ChangeControlKey key = 1;
};

message ChangeControlConfigDeleteResponse {
	// Key echoes back the key of the deleted ChangeControlConfig instance.
	ChangeControlKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

service ChangeControlConfigService {
	rpc GetOne (ChangeControlConfigRequest) returns (ChangeControlConfigResponse);
	rpc GetAll (ChangeControlConfigStreamRequest) returns (stream ChangeControlConfigStreamResponse);
	rpc Subscribe (ChangeControlConfigStreamRequest) returns (stream ChangeControlConfigStreamResponse);
	rpc Set (ChangeControlConfigSetRequest) returns (ChangeControlConfigSetResponse);
	rpc Delete (ChangeControlConfigDeleteRequest) returns (ChangeControlConfigDeleteResponse);
}
