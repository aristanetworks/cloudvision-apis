// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.studio.v1;
option go_package = "arista/resources/arista/studio.v1;studio";

import "arista/studio.v1/studio.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "google/protobuf/timestamp.proto";

message AssignedTagsRequest {
	// Key uniquely identifies a AssignedTags instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AssignedTags value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTags instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated AssignedTags partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AssignedTagsStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	AssignedTags value = 1;

	// Time holds the timestamp of this AssignedTags's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the AssignedTags value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service AssignedTagsService {
	rpc GetOne (AssignedTagsRequest) returns (AssignedTagsResponse);
	rpc GetAll (AssignedTagsStreamRequest) returns (stream AssignedTagsStreamResponse);
	rpc Subscribe (AssignedTagsStreamRequest) returns (stream AssignedTagsStreamResponse);
}

message AssignedTagsConfigRequest {
	// Key uniquely identifies a AssignedTagsConfig instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AssignedTagsConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTagsConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated AssignedTagsConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AssignedTagsConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	AssignedTagsConfig value = 1;

	// Time holds the timestamp of this AssignedTagsConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the AssignedTagsConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message AssignedTagsConfigSetRequest {
	// AssignedTagsConfig carries the value to set into the datastore.
	// See the documentation on the AssignedTagsConfig struct for which fields are required.
	AssignedTagsConfig value = 1;
};

message AssignedTagsConfigSetResponse {
	// Value carries all the values given in the AssignedTagsConfigSetRequest as well
	// as any server-generated values.
	AssignedTagsConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsConfigDeleteRequest {
	// Key indicates which AssignedTagsConfig instance to remove.
	// This field must always be set.
	StudioKey key = 1;
};

message AssignedTagsConfigDeleteResponse {
	// Key echoes back the key of the deleted AssignedTagsConfig instance.
	StudioKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

service AssignedTagsConfigService {
	rpc GetOne (AssignedTagsConfigRequest) returns (AssignedTagsConfigResponse);
	rpc GetAll (AssignedTagsConfigStreamRequest) returns (stream AssignedTagsConfigStreamResponse);
	rpc Subscribe (AssignedTagsConfigStreamRequest) returns (stream AssignedTagsConfigStreamResponse);
	rpc Set (AssignedTagsConfigSetRequest) returns (AssignedTagsConfigSetResponse);
	rpc Delete (AssignedTagsConfigDeleteRequest) returns (AssignedTagsConfigDeleteResponse);
}

message InputsRequest {
	// Key uniquely identifies a Inputs instance to retrieve.
	// This value must be populated.
	InputsKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message InputsResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Inputs value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Inputs instance in this response.
	google.protobuf.Timestamp time = 2;
};

message InputsStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Inputs partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message InputsStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Inputs value = 1;

	// Time holds the timestamp of this Inputs's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Inputs value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service InputsService {
	rpc GetOne (InputsRequest) returns (InputsResponse);
	rpc GetAll (InputsStreamRequest) returns (stream InputsStreamResponse);
	rpc Subscribe (InputsStreamRequest) returns (stream InputsStreamResponse);
}

message InputsConfigRequest {
	// Key uniquely identifies a InputsConfig instance to retrieve.
	// This value must be populated.
	InputsKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message InputsConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	InputsConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// InputsConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message InputsConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated InputsConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message InputsConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	InputsConfig value = 1;

	// Time holds the timestamp of this InputsConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the InputsConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message InputsConfigSetRequest {
	// InputsConfig carries the value to set into the datastore.
	// See the documentation on the InputsConfig struct for which fields are required.
	InputsConfig value = 1;
};

message InputsConfigSetResponse {
	// Value carries all the values given in the InputsConfigSetRequest as well
	// as any server-generated values.
	InputsConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message InputsConfigDeleteRequest {
	// Key indicates which InputsConfig instance to remove.
	// This field must always be set.
	InputsKey key = 1;
};

message InputsConfigDeleteResponse {
	// Key echoes back the key of the deleted InputsConfig instance.
	InputsKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

service InputsConfigService {
	rpc GetOne (InputsConfigRequest) returns (InputsConfigResponse);
	rpc GetAll (InputsConfigStreamRequest) returns (stream InputsConfigStreamResponse);
	rpc Subscribe (InputsConfigStreamRequest) returns (stream InputsConfigStreamResponse);
	rpc Set (InputsConfigSetRequest) returns (InputsConfigSetResponse);
	rpc Delete (InputsConfigDeleteRequest) returns (InputsConfigDeleteResponse);
}

message StudioRequest {
	// Key uniquely identifies a Studio instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message StudioResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Studio value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Studio instance in this response.
	google.protobuf.Timestamp time = 2;
};

message StudioStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Studio partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message StudioStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Studio value = 1;

	// Time holds the timestamp of this Studio's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Studio value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service StudioService {
	rpc GetOne (StudioRequest) returns (StudioResponse);
	rpc GetAll (StudioStreamRequest) returns (stream StudioStreamResponse);
	rpc Subscribe (StudioStreamRequest) returns (stream StudioStreamResponse);
}

message StudioConfigRequest {
	// Key uniquely identifies a StudioConfig instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message StudioConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	StudioConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message StudioConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated StudioConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message StudioConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	StudioConfig value = 1;

	// Time holds the timestamp of this StudioConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the StudioConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message StudioConfigSetRequest {
	// StudioConfig carries the value to set into the datastore.
	// See the documentation on the StudioConfig struct for which fields are required.
	StudioConfig value = 1;
};

message StudioConfigSetResponse {
	// Value carries all the values given in the StudioConfigSetRequest as well
	// as any server-generated values.
	StudioConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message StudioConfigDeleteRequest {
	// Key indicates which StudioConfig instance to remove.
	// This field must always be set.
	StudioKey key = 1;
};

message StudioConfigDeleteResponse {
	// Key echoes back the key of the deleted StudioConfig instance.
	StudioKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

service StudioConfigService {
	rpc GetOne (StudioConfigRequest) returns (StudioConfigResponse);
	rpc GetAll (StudioConfigStreamRequest) returns (stream StudioConfigStreamResponse);
	rpc Subscribe (StudioConfigStreamRequest) returns (stream StudioConfigStreamResponse);
	rpc Set (StudioConfigSetRequest) returns (StudioConfigSetResponse);
	rpc Delete (StudioConfigDeleteRequest) returns (StudioConfigDeleteResponse);
}
