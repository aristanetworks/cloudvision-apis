// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

// NOTE: This is a workspace-aware Resource API.
// Please see workspace.v1 for more information.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.studio.v1;
option go_package = "arista/resources/arista/studio.v1;studio";

import "arista/studio.v1/studio.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message AssignedTagsRequest {
	// Key uniquely identifies a AssignedTags instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AssignedTags value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTags instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated AssignedTags partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AssignedTags at end.
	//     * Each AssignedTags response is fully-specified (all fields set).
	//   * start: Returns the state of each AssignedTags at start, followed by updates until now.
	//     * Each AssignedTags response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AssignedTags at start, followed by updates
	//     until end.
	//     * Each AssignedTags response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AssignedTagsStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	AssignedTags value = 1;

	// Time holds the timestamp of this AssignedTags's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the AssignedTags value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service AssignedTagsService {
	rpc GetOne (AssignedTagsRequest) returns (AssignedTagsResponse);
	rpc GetAll (AssignedTagsStreamRequest) returns (stream AssignedTagsStreamResponse);
	rpc Subscribe (AssignedTagsStreamRequest) returns (stream AssignedTagsStreamResponse);
}

message AssignedTagsConfigRequest {
	// Key uniquely identifies a AssignedTagsConfig instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AssignedTagsConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// AssignedTagsConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated AssignedTagsConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AssignedTagsConfig at end.
	//     * Each AssignedTagsConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each AssignedTagsConfig at start, followed by updates until now.
	//     * Each AssignedTagsConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AssignedTagsConfig at start, followed by updates
	//     until end.
	//     * Each AssignedTagsConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AssignedTagsConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	AssignedTagsConfig value = 1;

	// Time holds the timestamp of this AssignedTagsConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the AssignedTagsConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message AssignedTagsConfigSetRequest {
	// AssignedTagsConfig carries the value to set into the datastore.
	// See the documentation on the AssignedTagsConfig struct for which fields are required.
	AssignedTagsConfig value = 1;
};

message AssignedTagsConfigSetResponse {
	// Value carries all the values given in the AssignedTagsConfigSetRequest as well
	// as any server-generated values.
	AssignedTagsConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsConfigSetSomeRequest {
	// value contains a list of AssignedTagsConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated AssignedTagsConfig values = 1;
};

message AssignedTagsConfigSetSomeResponse {
	StudioKey key = 1;
	string error = 2;
};

message AssignedTagsConfigDeleteRequest {
	// Key indicates which AssignedTagsConfig instance to remove.
	// This field must always be set.
	StudioKey key = 1;
};

message AssignedTagsConfigDeleteResponse {
	// Key echoes back the key of the deleted AssignedTagsConfig instance.
	StudioKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message AssignedTagsConfigDeleteAllRequest {
};

message AssignedTagsConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the AssignedTagsConfig instance that failed to be deleted.
	StudioKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service AssignedTagsConfigService {
	rpc GetOne (AssignedTagsConfigRequest) returns (AssignedTagsConfigResponse);
	rpc GetAll (AssignedTagsConfigStreamRequest) returns (stream AssignedTagsConfigStreamResponse);
	rpc Subscribe (AssignedTagsConfigStreamRequest) returns (stream AssignedTagsConfigStreamResponse);
	rpc Set (AssignedTagsConfigSetRequest) returns (AssignedTagsConfigSetResponse);
	rpc SetSome (AssignedTagsConfigSetSomeRequest) returns (stream AssignedTagsConfigSetSomeResponse);
	rpc Delete (AssignedTagsConfigDeleteRequest) returns (AssignedTagsConfigDeleteResponse);
	rpc DeleteAll (AssignedTagsConfigDeleteAllRequest) returns (stream AssignedTagsConfigDeleteAllResponse);
}

message AutofillActionRequest {
	// Key uniquely identifies a AutofillAction instance to retrieve.
	// This value must be populated.
	AutofillActionKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AutofillActionResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AutofillAction value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// AutofillAction instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AutofillActionStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated AutofillAction partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AutofillAction at end.
	//     * Each AutofillAction response is fully-specified (all fields set).
	//   * start: Returns the state of each AutofillAction at start, followed by updates until now.
	//     * Each AutofillAction response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AutofillAction at start, followed by updates
	//     until end.
	//     * Each AutofillAction response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AutofillActionStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	AutofillAction value = 1;

	// Time holds the timestamp of this AutofillAction's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the AutofillAction value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service AutofillActionService {
	rpc GetOne (AutofillActionRequest) returns (AutofillActionResponse);
	rpc GetAll (AutofillActionStreamRequest) returns (stream AutofillActionStreamResponse);
	rpc Subscribe (AutofillActionStreamRequest) returns (stream AutofillActionStreamResponse);
}

message AutofillActionConfigRequest {
	// Key uniquely identifies a AutofillActionConfig instance to retrieve.
	// This value must be populated.
	AutofillActionKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AutofillActionConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AutofillActionConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// AutofillActionConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AutofillActionConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated AutofillActionConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AutofillActionConfig at end.
	//     * Each AutofillActionConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each AutofillActionConfig at start, followed by updates until now.
	//     * Each AutofillActionConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AutofillActionConfig at start, followed by updates
	//     until end.
	//     * Each AutofillActionConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AutofillActionConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	AutofillActionConfig value = 1;

	// Time holds the timestamp of this AutofillActionConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the AutofillActionConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message AutofillActionConfigSetRequest {
	// AutofillActionConfig carries the value to set into the datastore.
	// See the documentation on the AutofillActionConfig struct for which fields are required.
	AutofillActionConfig value = 1;
};

message AutofillActionConfigSetResponse {
	// Value carries all the values given in the AutofillActionConfigSetRequest as well
	// as any server-generated values.
	AutofillActionConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message AutofillActionConfigSetSomeRequest {
	// value contains a list of AutofillActionConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated AutofillActionConfig values = 1;
};

message AutofillActionConfigSetSomeResponse {
	AutofillActionKey key = 1;
	string error = 2;
};

message AutofillActionConfigDeleteRequest {
	// Key indicates which AutofillActionConfig instance to remove.
	// This field must always be set.
	AutofillActionKey key = 1;
};

message AutofillActionConfigDeleteResponse {
	// Key echoes back the key of the deleted AutofillActionConfig instance.
	AutofillActionKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message AutofillActionConfigDeleteAllRequest {
};

message AutofillActionConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the AutofillActionConfig instance that failed to be deleted.
	AutofillActionKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service AutofillActionConfigService {
	rpc GetOne (AutofillActionConfigRequest) returns (AutofillActionConfigResponse);
	rpc GetAll (AutofillActionConfigStreamRequest) returns (stream AutofillActionConfigStreamResponse);
	rpc Subscribe (AutofillActionConfigStreamRequest) returns (stream AutofillActionConfigStreamResponse);
	rpc Set (AutofillActionConfigSetRequest) returns (AutofillActionConfigSetResponse);
	rpc SetSome (AutofillActionConfigSetSomeRequest) returns (stream AutofillActionConfigSetSomeResponse);
	rpc Delete (AutofillActionConfigDeleteRequest) returns (AutofillActionConfigDeleteResponse);
	rpc DeleteAll (AutofillActionConfigDeleteAllRequest) returns (stream AutofillActionConfigDeleteAllResponse);
}

message InputsRequest {
	// Key uniquely identifies a Inputs instance to retrieve.
	// This value must be populated.
	InputsKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message InputsResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Inputs value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Inputs instance in this response.
	google.protobuf.Timestamp time = 2;
};

message InputsStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Inputs partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Inputs at end.
	//     * Each Inputs response is fully-specified (all fields set).
	//   * start: Returns the state of each Inputs at start, followed by updates until now.
	//     * Each Inputs response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Inputs at start, followed by updates
	//     until end.
	//     * Each Inputs response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message InputsStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Inputs value = 1;

	// Time holds the timestamp of this Inputs's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Inputs value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service InputsService {
	rpc GetOne (InputsRequest) returns (InputsResponse);
	rpc GetAll (InputsStreamRequest) returns (stream InputsStreamResponse);
	rpc Subscribe (InputsStreamRequest) returns (stream InputsStreamResponse);
}

message InputsConfigRequest {
	// Key uniquely identifies a InputsConfig instance to retrieve.
	// This value must be populated.
	InputsKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message InputsConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	InputsConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// InputsConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message InputsConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated InputsConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each InputsConfig at end.
	//     * Each InputsConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each InputsConfig at start, followed by updates until now.
	//     * Each InputsConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each InputsConfig at start, followed by updates
	//     until end.
	//     * Each InputsConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message InputsConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	InputsConfig value = 1;

	// Time holds the timestamp of this InputsConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the InputsConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message InputsConfigSetRequest {
	// InputsConfig carries the value to set into the datastore.
	// See the documentation on the InputsConfig struct for which fields are required.
	InputsConfig value = 1;
};

message InputsConfigSetResponse {
	// Value carries all the values given in the InputsConfigSetRequest as well
	// as any server-generated values.
	InputsConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message InputsConfigSetSomeRequest {
	// value contains a list of InputsConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated InputsConfig values = 1;
};

message InputsConfigSetSomeResponse {
	InputsKey key = 1;
	string error = 2;
};

message InputsConfigDeleteRequest {
	// Key indicates which InputsConfig instance to remove.
	// This field must always be set.
	InputsKey key = 1;
};

message InputsConfigDeleteResponse {
	// Key echoes back the key of the deleted InputsConfig instance.
	InputsKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message InputsConfigDeleteAllRequest {
};

message InputsConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the InputsConfig instance that failed to be deleted.
	InputsKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service InputsConfigService {
	rpc GetOne (InputsConfigRequest) returns (InputsConfigResponse);
	rpc GetAll (InputsConfigStreamRequest) returns (stream InputsConfigStreamResponse);
	rpc Subscribe (InputsConfigStreamRequest) returns (stream InputsConfigStreamResponse);
	rpc Set (InputsConfigSetRequest) returns (InputsConfigSetResponse);
	rpc SetSome (InputsConfigSetSomeRequest) returns (stream InputsConfigSetSomeResponse);
	rpc Delete (InputsConfigDeleteRequest) returns (InputsConfigDeleteResponse);
	rpc DeleteAll (InputsConfigDeleteAllRequest) returns (stream InputsConfigDeleteAllResponse);
}

message SecretInputRequest {
	// Key uniquely identifies a SecretInput instance to retrieve.
	// This value must be populated.
	InputsKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message SecretInputResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	SecretInput value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// SecretInput instance in this response.
	google.protobuf.Timestamp time = 2;
};

message SecretInputStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated SecretInput partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each SecretInput at end.
	//     * Each SecretInput response is fully-specified (all fields set).
	//   * start: Returns the state of each SecretInput at start, followed by updates until now.
	//     * Each SecretInput response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each SecretInput at start, followed by updates
	//     until end.
	//     * Each SecretInput response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message SecretInputStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	SecretInput value = 1;

	// Time holds the timestamp of this SecretInput's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the SecretInput value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service SecretInputService {
	rpc GetOne (SecretInputRequest) returns (SecretInputResponse);
	rpc GetAll (SecretInputStreamRequest) returns (stream SecretInputStreamResponse);
	rpc Subscribe (SecretInputStreamRequest) returns (stream SecretInputStreamResponse);
}

message StudioRequest {
	// Key uniquely identifies a Studio instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message StudioResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Studio value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Studio instance in this response.
	google.protobuf.Timestamp time = 2;
};

message StudioStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Studio partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Studio at end.
	//     * Each Studio response is fully-specified (all fields set).
	//   * start: Returns the state of each Studio at start, followed by updates until now.
	//     * Each Studio response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Studio at start, followed by updates
	//     until end.
	//     * Each Studio response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message StudioStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Studio value = 1;

	// Time holds the timestamp of this Studio's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Studio value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service StudioService {
	rpc GetOne (StudioRequest) returns (StudioResponse);
	rpc GetAll (StudioStreamRequest) returns (stream StudioStreamResponse);
	rpc Subscribe (StudioStreamRequest) returns (stream StudioStreamResponse);
}

message StudioConfigRequest {
	// Key uniquely identifies a StudioConfig instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message StudioConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	StudioConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message StudioConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated StudioConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each StudioConfig at end.
	//     * Each StudioConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each StudioConfig at start, followed by updates until now.
	//     * Each StudioConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each StudioConfig at start, followed by updates
	//     until end.
	//     * Each StudioConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message StudioConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	StudioConfig value = 1;

	// Time holds the timestamp of this StudioConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the StudioConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message StudioConfigSetRequest {
	// StudioConfig carries the value to set into the datastore.
	// See the documentation on the StudioConfig struct for which fields are required.
	StudioConfig value = 1;
};

message StudioConfigSetResponse {
	// Value carries all the values given in the StudioConfigSetRequest as well
	// as any server-generated values.
	StudioConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message StudioConfigSetSomeRequest {
	// value contains a list of StudioConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated StudioConfig values = 1;
};

message StudioConfigSetSomeResponse {
	StudioKey key = 1;
	string error = 2;
};

message StudioConfigDeleteRequest {
	// Key indicates which StudioConfig instance to remove.
	// This field must always be set.
	StudioKey key = 1;
};

message StudioConfigDeleteResponse {
	// Key echoes back the key of the deleted StudioConfig instance.
	StudioKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message StudioConfigDeleteAllRequest {
};

message StudioConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the StudioConfig instance that failed to be deleted.
	StudioKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service StudioConfigService {
	rpc GetOne (StudioConfigRequest) returns (StudioConfigResponse);
	rpc GetAll (StudioConfigStreamRequest) returns (stream StudioConfigStreamResponse);
	rpc Subscribe (StudioConfigStreamRequest) returns (stream StudioConfigStreamResponse);
	rpc Set (StudioConfigSetRequest) returns (StudioConfigSetResponse);
	rpc SetSome (StudioConfigSetSomeRequest) returns (stream StudioConfigSetSomeResponse);
	rpc Delete (StudioConfigDeleteRequest) returns (StudioConfigDeleteResponse);
	rpc DeleteAll (StudioConfigDeleteAllRequest) returns (stream StudioConfigDeleteAllResponse);
}

message StudioSummaryRequest {
	// Key uniquely identifies a StudioSummary instance to retrieve.
	// This value must be populated.
	StudioKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message StudioSummaryResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	StudioSummary value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// StudioSummary instance in this response.
	google.protobuf.Timestamp time = 2;
};

message StudioSummaryStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated StudioSummary partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each StudioSummary at end.
	//     * Each StudioSummary response is fully-specified (all fields set).
	//   * start: Returns the state of each StudioSummary at start, followed by updates until now.
	//     * Each StudioSummary response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each StudioSummary at start, followed by updates
	//     until end.
	//     * Each StudioSummary response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message StudioSummaryStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	StudioSummary value = 1;

	// Time holds the timestamp of this StudioSummary's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the StudioSummary value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service StudioSummaryService {
	rpc GetOne (StudioSummaryRequest) returns (StudioSummaryResponse);
	rpc GetAll (StudioSummaryStreamRequest) returns (stream StudioSummaryStreamResponse);
	rpc Subscribe (StudioSummaryStreamRequest) returns (stream StudioSummaryStreamResponse);
}

message TopologyInputRequest {
	// Key uniquely identifies a TopologyInput instance to retrieve.
	// This value must be populated.
	TopologyInputKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TopologyInputResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TopologyInput value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyInput instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TopologyInputStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TopologyInput partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyInput at end.
	//     * Each TopologyInput response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyInput at start, followed by updates until now.
	//     * Each TopologyInput response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyInput at start, followed by updates
	//     until end.
	//     * Each TopologyInput response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TopologyInputStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TopologyInput value = 1;

	// Time holds the timestamp of this TopologyInput's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TopologyInput value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service TopologyInputService {
	rpc GetOne (TopologyInputRequest) returns (TopologyInputResponse);
	rpc GetAll (TopologyInputStreamRequest) returns (stream TopologyInputStreamResponse);
	rpc Subscribe (TopologyInputStreamRequest) returns (stream TopologyInputStreamResponse);
}

message TopologyInputConfigRequest {
	// Key uniquely identifies a TopologyInputConfig instance to retrieve.
	// This value must be populated.
	TopologyInputKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TopologyInputConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TopologyInputConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyInputConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TopologyInputConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TopologyInputConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyInputConfig at end.
	//     * Each TopologyInputConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyInputConfig at start, followed by updates until now.
	//     * Each TopologyInputConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyInputConfig at start, followed by updates
	//     until end.
	//     * Each TopologyInputConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TopologyInputConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TopologyInputConfig value = 1;

	// Time holds the timestamp of this TopologyInputConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TopologyInputConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message TopologyInputConfigSetRequest {
	// TopologyInputConfig carries the value to set into the datastore.
	// See the documentation on the TopologyInputConfig struct for which fields are required.
	TopologyInputConfig value = 1;
};

message TopologyInputConfigSetResponse {
	// Value carries all the values given in the TopologyInputConfigSetRequest as well
	// as any server-generated values.
	TopologyInputConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TopologyInputConfigSetSomeRequest {
	// value contains a list of TopologyInputConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated TopologyInputConfig values = 1;
};

message TopologyInputConfigSetSomeResponse {
	TopologyInputKey key = 1;
	string error = 2;
};

message TopologyInputConfigDeleteRequest {
	// Key indicates which TopologyInputConfig instance to remove.
	// This field must always be set.
	TopologyInputKey key = 1;
};

message TopologyInputConfigDeleteResponse {
	// Key echoes back the key of the deleted TopologyInputConfig instance.
	TopologyInputKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TopologyInputConfigDeleteAllRequest {
};

message TopologyInputConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the TopologyInputConfig instance that failed to be deleted.
	TopologyInputKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service TopologyInputConfigService {
	rpc GetOne (TopologyInputConfigRequest) returns (TopologyInputConfigResponse);
	rpc GetAll (TopologyInputConfigStreamRequest) returns (stream TopologyInputConfigStreamResponse);
	rpc Subscribe (TopologyInputConfigStreamRequest) returns (stream TopologyInputConfigStreamResponse);
	rpc Set (TopologyInputConfigSetRequest) returns (TopologyInputConfigSetResponse);
	rpc SetSome (TopologyInputConfigSetSomeRequest) returns (stream TopologyInputConfigSetSomeResponse);
	rpc Delete (TopologyInputConfigDeleteRequest) returns (TopologyInputConfigDeleteResponse);
	rpc DeleteAll (TopologyInputConfigDeleteAllRequest) returns (stream TopologyInputConfigDeleteAllResponse);
}

message TopologyUpdateRequest {
	// Key uniquely identifies a TopologyUpdate instance to retrieve.
	// This value must be populated.
	TopologyUpdateKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TopologyUpdate value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyUpdate instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TopologyUpdate partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyUpdate at end.
	//     * Each TopologyUpdate response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyUpdate at start, followed by updates until now.
	//     * Each TopologyUpdate response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyUpdate at start, followed by updates
	//     until end.
	//     * Each TopologyUpdate response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TopologyUpdateStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TopologyUpdate value = 1;

	// Time holds the timestamp of this TopologyUpdate's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TopologyUpdate value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service TopologyUpdateService {
	rpc GetOne (TopologyUpdateRequest) returns (TopologyUpdateResponse);
	rpc GetAll (TopologyUpdateStreamRequest) returns (stream TopologyUpdateStreamResponse);
	rpc Subscribe (TopologyUpdateStreamRequest) returns (stream TopologyUpdateStreamResponse);
}

message TopologyUpdateConfigRequest {
	// Key uniquely identifies a TopologyUpdateConfig instance to retrieve.
	// This value must be populated.
	TopologyUpdateKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TopologyUpdateConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyUpdateConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TopologyUpdateConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyUpdateConfig at end.
	//     * Each TopologyUpdateConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyUpdateConfig at start, followed by updates until now.
	//     * Each TopologyUpdateConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyUpdateConfig at start, followed by updates
	//     until end.
	//     * Each TopologyUpdateConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TopologyUpdateConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TopologyUpdateConfig value = 1;

	// Time holds the timestamp of this TopologyUpdateConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TopologyUpdateConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message TopologyUpdateConfigSetRequest {
	// TopologyUpdateConfig carries the value to set into the datastore.
	// See the documentation on the TopologyUpdateConfig struct for which fields are required.
	TopologyUpdateConfig value = 1;
};

message TopologyUpdateConfigSetResponse {
	// Value carries all the values given in the TopologyUpdateConfigSetRequest as well
	// as any server-generated values.
	TopologyUpdateConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateConfigSetSomeRequest {
	// value contains a list of TopologyUpdateConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated TopologyUpdateConfig values = 1;
};

message TopologyUpdateConfigSetSomeResponse {
	TopologyUpdateKey key = 1;
	string error = 2;
};

message TopologyUpdateConfigDeleteRequest {
	// Key indicates which TopologyUpdateConfig instance to remove.
	// This field must always be set.
	TopologyUpdateKey key = 1;
};

message TopologyUpdateConfigDeleteResponse {
	// Key echoes back the key of the deleted TopologyUpdateConfig instance.
	TopologyUpdateKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateConfigDeleteAllRequest {
};

message TopologyUpdateConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the TopologyUpdateConfig instance that failed to be deleted.
	TopologyUpdateKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service TopologyUpdateConfigService {
	rpc GetOne (TopologyUpdateConfigRequest) returns (TopologyUpdateConfigResponse);
	rpc GetAll (TopologyUpdateConfigStreamRequest) returns (stream TopologyUpdateConfigStreamResponse);
	rpc Subscribe (TopologyUpdateConfigStreamRequest) returns (stream TopologyUpdateConfigStreamResponse);
	rpc Set (TopologyUpdateConfigSetRequest) returns (TopologyUpdateConfigSetResponse);
	rpc SetSome (TopologyUpdateConfigSetSomeRequest) returns (stream TopologyUpdateConfigSetSomeResponse);
	rpc Delete (TopologyUpdateConfigDeleteRequest) returns (TopologyUpdateConfigDeleteResponse);
	rpc DeleteAll (TopologyUpdateConfigDeleteAllRequest) returns (stream TopologyUpdateConfigDeleteAllResponse);
}

message TopologyUpdateSyncRequest {
	// Key uniquely identifies a TopologyUpdateSync instance to retrieve.
	// This value must be populated.
	WorkspaceKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateSyncResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TopologyUpdateSync value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyUpdateSync instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateSyncStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TopologyUpdateSync partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyUpdateSync at end.
	//     * Each TopologyUpdateSync response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyUpdateSync at start, followed by updates until now.
	//     * Each TopologyUpdateSync response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyUpdateSync at start, followed by updates
	//     until end.
	//     * Each TopologyUpdateSync response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TopologyUpdateSyncStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TopologyUpdateSync value = 1;

	// Time holds the timestamp of this TopologyUpdateSync's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TopologyUpdateSync value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service TopologyUpdateSyncService {
	rpc GetOne (TopologyUpdateSyncRequest) returns (TopologyUpdateSyncResponse);
	rpc GetAll (TopologyUpdateSyncStreamRequest) returns (stream TopologyUpdateSyncStreamResponse);
	rpc Subscribe (TopologyUpdateSyncStreamRequest) returns (stream TopologyUpdateSyncStreamResponse);
}

message TopologyUpdateSyncConfigRequest {
	// Key uniquely identifies a TopologyUpdateSyncConfig instance to retrieve.
	// This value must be populated.
	WorkspaceKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateSyncConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TopologyUpdateSyncConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyUpdateSyncConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateSyncConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TopologyUpdateSyncConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TopologyUpdateSyncConfig at end.
	//     * Each TopologyUpdateSyncConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TopologyUpdateSyncConfig at start, followed by updates until now.
	//     * Each TopologyUpdateSyncConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TopologyUpdateSyncConfig at start, followed by updates
	//     until end.
	//     * Each TopologyUpdateSyncConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TopologyUpdateSyncConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TopologyUpdateSyncConfig value = 1;

	// Time holds the timestamp of this TopologyUpdateSyncConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TopologyUpdateSyncConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message TopologyUpdateSyncConfigSetRequest {
	// TopologyUpdateSyncConfig carries the value to set into the datastore.
	// See the documentation on the TopologyUpdateSyncConfig struct for which fields are required.
	TopologyUpdateSyncConfig value = 1;
};

message TopologyUpdateSyncConfigSetResponse {
	// Value carries all the values given in the TopologyUpdateSyncConfigSetRequest as well
	// as any server-generated values.
	TopologyUpdateSyncConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateSyncConfigSetSomeRequest {
	// value contains a list of TopologyUpdateSyncConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated TopologyUpdateSyncConfig values = 1;
};

message TopologyUpdateSyncConfigSetSomeResponse {
	WorkspaceKey key = 1;
	string error = 2;
};

message TopologyUpdateSyncConfigDeleteRequest {
	// Key indicates which TopologyUpdateSyncConfig instance to remove.
	// This field must always be set.
	WorkspaceKey key = 1;
};

message TopologyUpdateSyncConfigDeleteResponse {
	// Key echoes back the key of the deleted TopologyUpdateSyncConfig instance.
	WorkspaceKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TopologyUpdateSyncConfigDeleteAllRequest {
};

message TopologyUpdateSyncConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the TopologyUpdateSyncConfig instance that failed to be deleted.
	WorkspaceKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service TopologyUpdateSyncConfigService {
	rpc GetOne (TopologyUpdateSyncConfigRequest) returns (TopologyUpdateSyncConfigResponse);
	rpc GetAll (TopologyUpdateSyncConfigStreamRequest) returns (stream TopologyUpdateSyncConfigStreamResponse);
	rpc Subscribe (TopologyUpdateSyncConfigStreamRequest) returns (stream TopologyUpdateSyncConfigStreamResponse);
	rpc Set (TopologyUpdateSyncConfigSetRequest) returns (TopologyUpdateSyncConfigSetResponse);
	rpc SetSome (TopologyUpdateSyncConfigSetSomeRequest) returns (stream TopologyUpdateSyncConfigSetSomeResponse);
	rpc Delete (TopologyUpdateSyncConfigDeleteRequest) returns (TopologyUpdateSyncConfigDeleteResponse);
	rpc DeleteAll (TopologyUpdateSyncConfigDeleteAllRequest) returns (stream TopologyUpdateSyncConfigDeleteAllResponse);
}
