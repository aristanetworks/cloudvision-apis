// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.identityprovider.v1;
option go_package = "arista/resources/arista/identityprovider.v1;identityprovider";

import "arista/identityprovider.v1/identityprovider.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message OAuthConfigRequest {
	// Key uniquely identifies a OAuthConfig instance to retrieve.
	// This value must be populated.
	OAuthKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message OAuthConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	OAuthConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// OAuthConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message OAuthConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated OAuthConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message OAuthConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	OAuthConfig value = 1;

	// Time holds the timestamp of this OAuthConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the OAuthConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message OAuthConfigSetRequest {
	// OAuthConfig carries the value to set into the datastore.
	// See the documentation on the OAuthConfig struct for which fields are required.
	OAuthConfig value = 1;
};

message OAuthConfigSetResponse {
	// Value carries all the values given in the OAuthConfigSetRequest as well
	// as any server-generated values.
	OAuthConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message OAuthConfigDeleteRequest {
	// Key indicates which OAuthConfig instance to remove.
	// This field must always be set.
	OAuthKey key = 1;
};

message OAuthConfigDeleteResponse {
	// Key echoes back the key of the deleted OAuthConfig instance.
	OAuthKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message OAuthConfigDeleteAllRequest {
};

message OAuthConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the OAuthConfig instance that failed to be deleted.
	OAuthKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service OAuthConfigService {
	rpc GetOne (OAuthConfigRequest) returns (OAuthConfigResponse);
	rpc GetAll (OAuthConfigStreamRequest) returns (stream OAuthConfigStreamResponse);
	rpc Subscribe (OAuthConfigStreamRequest) returns (stream OAuthConfigStreamResponse);
	rpc Set (OAuthConfigSetRequest) returns (OAuthConfigSetResponse);
	rpc Delete (OAuthConfigDeleteRequest) returns (OAuthConfigDeleteResponse);
	rpc DeleteAll (OAuthConfigDeleteAllRequest) returns (stream OAuthConfigDeleteAllResponse);
}

message SAMLConfigRequest {
	// Key uniquely identifies a SAMLConfig instance to retrieve.
	// This value must be populated.
	SAMLKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message SAMLConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	SAMLConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// SAMLConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message SAMLConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated SAMLConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message SAMLConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	SAMLConfig value = 1;

	// Time holds the timestamp of this SAMLConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the SAMLConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message SAMLConfigSetRequest {
	// SAMLConfig carries the value to set into the datastore.
	// See the documentation on the SAMLConfig struct for which fields are required.
	SAMLConfig value = 1;
};

message SAMLConfigSetResponse {
	// Value carries all the values given in the SAMLConfigSetRequest as well
	// as any server-generated values.
	SAMLConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message SAMLConfigDeleteRequest {
	// Key indicates which SAMLConfig instance to remove.
	// This field must always be set.
	SAMLKey key = 1;
};

message SAMLConfigDeleteResponse {
	// Key echoes back the key of the deleted SAMLConfig instance.
	SAMLKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message SAMLConfigDeleteAllRequest {
};

message SAMLConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the SAMLConfig instance that failed to be deleted.
	SAMLKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service SAMLConfigService {
	rpc GetOne (SAMLConfigRequest) returns (SAMLConfigResponse);
	rpc GetAll (SAMLConfigStreamRequest) returns (stream SAMLConfigStreamResponse);
	rpc Subscribe (SAMLConfigStreamRequest) returns (stream SAMLConfigStreamResponse);
	rpc Set (SAMLConfigSetRequest) returns (SAMLConfigSetResponse);
	rpc Delete (SAMLConfigDeleteRequest) returns (SAMLConfigDeleteResponse);
	rpc DeleteAll (SAMLConfigDeleteAllRequest) returns (stream SAMLConfigDeleteAllResponse);
}
