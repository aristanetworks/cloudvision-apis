// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

syntax = "proto3";

package arista.event.v1;

option go_package = "github.com/aristanetworks/cloudvision-go/api/arista/event.v1;event";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "fmp/extensions.proto";

// EventSeverity is the severity level of the event
enum EventSeverity {
  // EVENT_SEVERITY_UNSPECIFIED is the default value, if the severity is not specified.
  EVENT_SEVERITY_UNSPECIFIED = 0;
  // EVENT_SEVERITY_INFO is used for generally useful information.
  EVENT_SEVERITY_INFO = 1;
  // EVENT_SEVERITY_WARNING is used for potentially harmful conditions.
  EVENT_SEVERITY_WARNING = 2;
  // EVENT_SEVERITY_ERROR is used for errors events that may allow for continued functioning.
  EVENT_SEVERITY_ERROR = 3;
  // EVENT_SEVERITY_CRITICAL is used to designate severe errors that impede functioning.
  EVENT_SEVERITY_CRITICAL = 4;
  // EVENT_SEVERITY_DEBUG is used for debugging useful information.
  EVENT_SEVERITY_DEBUG = 5;
}

// ComponentType describes the type of entity on which the event occurred
enum ComponentType {
  // COMPONENT_TYPE_UNSPECIFIED is the default value, if the type is not specified.
  COMPONENT_TYPE_UNSPECIFIED = 0;
  // COMPONENT_TYPE_DEVICE is used for device events.
  COMPONENT_TYPE_DEVICE = 1;
  // COMPONENT_TYPE_INTERFACE is used for device interface events.
  COMPONENT_TYPE_INTERFACE = 2;
  // COMPONENT_TYPE_TURBINE is used for events on the internal CVP turbine
  // components. A turbine is an internal CV streaming analytics backend process.
  COMPONENT_TYPE_TURBINE = 3;
  // COMPONENT_TYPE_VDS is used for VDS events.
  // A vSphere Distributed Switch provides centralized management and
  // monitoring of the networking configuration of all workload servers that are
  // associated with the switch.
  COMPONENT_TYPE_VDS = 4;
  // COMPONENT_TYPE_VDS_INTERFACE is used for VDS interface events.
  COMPONENT_TYPE_VDS_INTERFACE = 5;
  // COMPONENT_TYPE_VM is used for VM events.
  // A VM is a software computer that, like a physical computer, runs an
  // operating system and applications.
  COMPONENT_TYPE_VM = 6;
  // COMPONENT_TYPE_VM_INTERFACE is used for VM interface events.
  COMPONENT_TYPE_VM_INTERFACE = 7;
  // COMPONENT_TYPE_WORKLOAD_SERVER is used for workload server events.
  // A workload server is a server/data storage device on which the hypervisor is installed.
  COMPONENT_TYPE_WORKLOAD_SERVER = 8;
  // COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE is used for workload server interface events.
  COMPONENT_TYPE_WORKLOAD_SERVER_INTERFACE = 9;
  // COMPONENT_TYPE_APPLICATION is used for application-service events.
  COMPONENT_TYPE_APPLICATION = 10;
  // COMPONENT_TYPE_CVP_NODE is used for CVP node events.
  COMPONENT_TYPE_CVP_NODE = 11;
}

// EventComponent describes an entity on which the event occurred
message EventComponent {
  // type is the type of component
  ComponentType type = 1;
  // components identifies the entity on which the event occurred
  map<string, string> components = 2;
}

// EventComponents contains entities on which an event occurred
message EventComponents {
  // components describes the components on which an event occurred
  repeated EventComponent components = 1;
}

// EventAck contains acknowledgement information of an event
message EventAck {
  // ack is the acknowledgement state of an event
  google.protobuf.BoolValue ack = 1;
  // acker is the user that acknowledged the event
  google.protobuf.StringValue acker = 2;
  // ack_time is the time of acknowledgement
  google.protobuf.Timestamp ack_time = 3;
}

// EventRead contains read information of an event
message EventRead {
  // read is the read state of an event
  google.protobuf.BoolValue read = 1;
  // reader is the user that read the event
  google.protobuf.StringValue reader = 2;
  // read_time is the time of read
  google.protobuf.Timestamp read_time = 3;
}

// EventNoteConfig configures a note
//
// NOTE: note is required when used as an argument
//       to Set.
message EventNoteConfig {
  // note is the text of the note
  google.protobuf.StringValue note = 1;
}

// EventNote is the state of a note
message EventNote {
  // note is the text of the note
  google.protobuf.StringValue note = 1;
  // note_creator is the creator of the note
  google.protobuf.StringValue note_creator = 2;
}

// EventKey uniquely identifies an event
//
// NOTE: All fields are required when used as an argument
//       to GetOne, Set or Delete.
message EventKey {
  option (fmp.model_key) = true;
  // key is the event data identifier
  google.protobuf.StringValue key = 1;
  // timestamp is the time the event occurred
  google.protobuf.Timestamp timestamp = 2;
}

// EventData is additional event data
message EventData {
  // data is event data specific to the type of this event
  map<string, string> data = 1;
}

// EventNotesConfig configures the notes of an event
//
// NOTE: notes is required when used as an argument
//       to Set.
message EventNotesConfig {
  // notes is keyed by desired note time in Unix time, in milliseconds
  map<int64, EventNoteConfig> notes = 1;
}

// EventAnnotationConfig configures an event annotation
//
// NOTE: Either 1) key and ack or 2) key and notes or 3) key and read are
//       required when used as an argument to Set.
message EventAnnotationConfig{
  option (fmp.model) = "rw";
  // key is the event instance identifier
  EventKey key = 1;
  // ack is the acknowledgement state of an event
  google.protobuf.BoolValue ack = 2;
  // notes is the notes on an event
  EventNotesConfig notes = 3;
  // read is the read state of an event. Setting this implies that an event has been read by a user
  google.protobuf.BoolValue read = 4;
}

// EventNotes is the notes of an event state
message EventNotes {
  // notes is keyed by the time desired
  map<int64, EventNote> notes = 1;
}

// Event is a telemetry event
message Event {
  option (fmp.model) = "ro";
  // key is the event instance identifier
  EventKey key = 1;
  // severity is the severity of the event
  EventSeverity severity = 2;
  // title is the title of the event
  google.protobuf.StringValue title = 3;
  // description is the description of the event
  google.protobuf.StringValue description = 4;
  // event_type is the type of the event
  google.protobuf.StringValue event_type = 5;
  // data is the data of the event
  EventData data = 6;
  // components is the components on which the event occurred
  EventComponents components = 7;
  // ack is the acknowledgement status of the event
  EventAck ack = 8;
  // notes is the notes of the event
  EventNotes notes = 9;
  // last_updated_time is the time of the most recent update to the event
  google.protobuf.Timestamp last_updated_time = 10;
  // read is the read status of the event
  EventRead read = 11;
  // rule_id is the label of the rule associated with the event
  google.protobuf.StringValue rule_id = 12;
  // delete_time is the time when the event ended.
  // It is nil if event is still ongoing
  google.protobuf.Timestamp delete_time = 13;
}

// UserEventCreationKey uniquely identifies a user event request.
message UserEventCreationKey {
  option (fmp.model_key) = true;
  // key is a unique string identifier
  google.protobuf.StringValue key = 1;
}

// UserEventCreationConfig is the basis for the manual creation of new events.
//
// NOTE: Set is the only valid operation.
//       Objects are immediately deleted upon event creation.
//       All fields are required to create a well-formed event.
message UserEventCreationConfig {
  option (fmp.model) = "rw";
  // key is the event instance identifier
  UserEventCreationKey key = 1;
  // severity is the severity of the event
  EventSeverity severity = 2;
  // title is the title of the event
  google.protobuf.StringValue title = 3;
  // description is the description of the event
  google.protobuf.StringValue description = 4;
  // rule_id is the label of the rule associated with the event
  google.protobuf.StringValue rule_id = 6;
  // components is the components on which the event occurred
  EventComponents components = 7;
  // start_time is the time point at which the event occurred
  google.protobuf.Timestamp start_time = 8;
}
