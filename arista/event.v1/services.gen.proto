// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.event.v1;
option go_package = "arista/resources/arista/event.v1;event";

import "arista/event.v1/event.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "google/protobuf/timestamp.proto";

message EventRequest {
	// Key uniquely identifies a Event instance to retrieve.
	// This value must be populated.
	EventKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	google.protobuf.Timestamp time = 2;
};

message EventResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Event value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Event instance in this response.
	google.protobuf.Timestamp time = 2;
};

message EventStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Event partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message EventStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Event value = 1;

	// Time holds the timestamp of this Event's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Event value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service EventService {
	rpc GetOne (EventRequest) returns (EventResponse);
	rpc GetAll (EventStreamRequest) returns (stream EventStreamResponse);
	rpc Subscribe (EventStreamRequest) returns (stream EventStreamResponse);
}

message EventAnnotationConfigRequest {
	// Key uniquely identifies a EventAnnotationConfig instance to retrieve.
	// This value must be populated.
	EventKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	google.protobuf.Timestamp time = 2;
};

message EventAnnotationConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	EventAnnotationConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// EventAnnotationConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message EventAnnotationConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated EventAnnotationConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message EventAnnotationConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	EventAnnotationConfig value = 1;

	// Time holds the timestamp of this EventAnnotationConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the EventAnnotationConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message EventAnnotationConfigSetRequest {
	// EventAnnotationConfig carries the value to set into the datastore.
	// See the documentation on the EventAnnotationConfig struct for which fields are required.
	EventAnnotationConfig value = 1;
};

message EventAnnotationConfigSetResponse {
	// Value carries all the values given in the EventAnnotationConfigSetRequest as well
	// as any server-generated values.
	EventAnnotationConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message EventAnnotationConfigDeleteRequest {
	// Key indicates which EventAnnotationConfig instance to remove.
	// This field must always be set.
	EventKey key = 1;
};

message EventAnnotationConfigDeleteResponse {
	// Key echoes back the key of the deleted EventAnnotationConfig instance.
	EventKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

service EventAnnotationConfigService {
	rpc GetOne (EventAnnotationConfigRequest) returns (EventAnnotationConfigResponse);
	rpc GetAll (EventAnnotationConfigStreamRequest) returns (stream EventAnnotationConfigStreamResponse);
	rpc Subscribe (EventAnnotationConfigStreamRequest) returns (stream EventAnnotationConfigStreamResponse);
	rpc Set (EventAnnotationConfigSetRequest) returns (EventAnnotationConfigSetResponse);
	rpc Delete (EventAnnotationConfigDeleteRequest) returns (EventAnnotationConfigDeleteResponse);
}
