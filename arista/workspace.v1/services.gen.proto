// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

// CloudVision allows users to version control provisioning operations
// that impact device configuration and image management. A workspace is
// something like a git branch, within which changes can be made without
// immediately impacting a device's running configuration. Changes can be
// made, modified, and previewed in a workspace. Once satisfied with the
// set of changes, a user may submit a workspace to the "mainline" branch,
// allowing the changes to be propagated to devices via Change Controls.
//
// A workspace comprises a set of diff operations (e.g., add/modify/remove)
// that will be applied to the mainline if the workspace is submitted
// successfully.
//
// A workspace itself is generic and can be used for any conceivable
// set of device provisioning operations, but it is not capable of
// describing the specific kind of changes. Rather, it holds changes
// defined by other Resource APIs that are "workspace-aware", such as
// studio.v1 and tag.v2. These APIs allow users to make changes within
// the context of a specific workspace, identified in the resource key
// with the field `workspace_id`.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.workspace.v1;
option go_package = "github.com/aristanetworks/cloudvision-go/api/arista/workspace.v1;workspace";

import "arista/workspace.v1/workspace.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message MetaResponse {
	// Time holds the timestamp of the last item included in the metadata calculation.
	google.protobuf.Timestamp time = 1;

	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 2;

	// Count is the number of items present under the conditions of the request.
	google.protobuf.UInt32Value count = 3;
};

message WorkspaceRequest {
	// Key uniquely identifies a Workspace instance to retrieve.
	// This value must be populated.
	WorkspaceKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Workspace value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Workspace instance in this response.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceSomeRequest {
	repeated WorkspaceKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Workspace value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message WorkspaceStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Workspace partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Workspace at end.
	//     * Each Workspace response is fully-specified (all fields set).
	//   * start: Returns the state of each Workspace at start, followed by updates until now.
	//     * Each Workspace response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Workspace at start, followed by updates
	//     until end.
	//     * Each Workspace response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message WorkspaceStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Workspace value = 1;

	// Time holds the timestamp of this Workspace's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Workspace value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message WorkspaceBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Workspace partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Workspace at end.
	//     * Each Workspace response is fully-specified (all fields set).
	//   * start: Returns the state of each Workspace at start, followed by updates until now.
	//     * Each Workspace response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Workspace at start, followed by updates
	//     until end.
	//     * Each Workspace response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message WorkspaceBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated WorkspaceStreamResponse responses = 1;
};

service WorkspaceService {
	rpc GetOne (WorkspaceRequest) returns (WorkspaceResponse);
	rpc GetSome (WorkspaceSomeRequest) returns (stream WorkspaceSomeResponse);
	rpc GetAll (WorkspaceStreamRequest) returns (stream WorkspaceStreamResponse);
	rpc Subscribe (WorkspaceStreamRequest) returns (stream WorkspaceStreamResponse);
	rpc GetMeta (WorkspaceStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (WorkspaceStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (WorkspaceBatchedStreamRequest) returns (stream WorkspaceBatchedStreamResponse);
	rpc SubscribeBatched (WorkspaceBatchedStreamRequest) returns (stream WorkspaceBatchedStreamResponse);
}

message WorkspaceBuildRequest {
	// Key uniquely identifies a WorkspaceBuild instance to retrieve.
	// This value must be populated.
	WorkspaceBuildKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceBuildResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	WorkspaceBuild value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// WorkspaceBuild instance in this response.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceBuildSomeRequest {
	repeated WorkspaceBuildKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceBuildSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	WorkspaceBuild value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message WorkspaceBuildStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated WorkspaceBuild partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each WorkspaceBuild at end.
	//     * Each WorkspaceBuild response is fully-specified (all fields set).
	//   * start: Returns the state of each WorkspaceBuild at start, followed by updates until now.
	//     * Each WorkspaceBuild response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each WorkspaceBuild at start, followed by updates
	//     until end.
	//     * Each WorkspaceBuild response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message WorkspaceBuildStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	WorkspaceBuild value = 1;

	// Time holds the timestamp of this WorkspaceBuild's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the WorkspaceBuild value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message WorkspaceBuildBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated WorkspaceBuild partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each WorkspaceBuild at end.
	//     * Each WorkspaceBuild response is fully-specified (all fields set).
	//   * start: Returns the state of each WorkspaceBuild at start, followed by updates until now.
	//     * Each WorkspaceBuild response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each WorkspaceBuild at start, followed by updates
	//     until end.
	//     * Each WorkspaceBuild response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message WorkspaceBuildBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated WorkspaceBuildStreamResponse responses = 1;
};

service WorkspaceBuildService {
	rpc GetOne (WorkspaceBuildRequest) returns (WorkspaceBuildResponse);
	rpc GetSome (WorkspaceBuildSomeRequest) returns (stream WorkspaceBuildSomeResponse);
	rpc GetAll (WorkspaceBuildStreamRequest) returns (stream WorkspaceBuildStreamResponse);
	rpc Subscribe (WorkspaceBuildStreamRequest) returns (stream WorkspaceBuildStreamResponse);
	rpc GetMeta (WorkspaceBuildStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (WorkspaceBuildStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (WorkspaceBuildBatchedStreamRequest) returns (stream WorkspaceBuildBatchedStreamResponse);
	rpc SubscribeBatched (WorkspaceBuildBatchedStreamRequest) returns (stream WorkspaceBuildBatchedStreamResponse);
}

message WorkspaceBuildDetailsRequest {
	// Key uniquely identifies a WorkspaceBuildDetails instance to retrieve.
	// This value must be populated.
	WorkspaceBuildDetailsKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceBuildDetailsResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	WorkspaceBuildDetails value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// WorkspaceBuildDetails instance in this response.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceBuildDetailsSomeRequest {
	repeated WorkspaceBuildDetailsKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceBuildDetailsSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	WorkspaceBuildDetails value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message WorkspaceBuildDetailsStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated WorkspaceBuildDetails partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each WorkspaceBuildDetails at end.
	//     * Each WorkspaceBuildDetails response is fully-specified (all fields set).
	//   * start: Returns the state of each WorkspaceBuildDetails at start, followed by updates until now.
	//     * Each WorkspaceBuildDetails response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each WorkspaceBuildDetails at start, followed by updates
	//     until end.
	//     * Each WorkspaceBuildDetails response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message WorkspaceBuildDetailsStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	WorkspaceBuildDetails value = 1;

	// Time holds the timestamp of this WorkspaceBuildDetails's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the WorkspaceBuildDetails value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message WorkspaceBuildDetailsBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated WorkspaceBuildDetails partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each WorkspaceBuildDetails at end.
	//     * Each WorkspaceBuildDetails response is fully-specified (all fields set).
	//   * start: Returns the state of each WorkspaceBuildDetails at start, followed by updates until now.
	//     * Each WorkspaceBuildDetails response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each WorkspaceBuildDetails at start, followed by updates
	//     until end.
	//     * Each WorkspaceBuildDetails response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message WorkspaceBuildDetailsBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated WorkspaceBuildDetailsStreamResponse responses = 1;
};

service WorkspaceBuildDetailsService {
	rpc GetOne (WorkspaceBuildDetailsRequest) returns (WorkspaceBuildDetailsResponse);
	rpc GetSome (WorkspaceBuildDetailsSomeRequest) returns (stream WorkspaceBuildDetailsSomeResponse);
	rpc GetAll (WorkspaceBuildDetailsStreamRequest) returns (stream WorkspaceBuildDetailsStreamResponse);
	rpc Subscribe (WorkspaceBuildDetailsStreamRequest) returns (stream WorkspaceBuildDetailsStreamResponse);
	rpc GetMeta (WorkspaceBuildDetailsStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (WorkspaceBuildDetailsStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (WorkspaceBuildDetailsBatchedStreamRequest) returns (stream WorkspaceBuildDetailsBatchedStreamResponse);
	rpc SubscribeBatched (WorkspaceBuildDetailsBatchedStreamRequest) returns (stream WorkspaceBuildDetailsBatchedStreamResponse);
}

message WorkspaceConfigRequest {
	// Key uniquely identifies a WorkspaceConfig instance to retrieve.
	// This value must be populated.
	WorkspaceKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	WorkspaceConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// WorkspaceConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceConfigSomeRequest {
	repeated WorkspaceKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	WorkspaceConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message WorkspaceConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated WorkspaceConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each WorkspaceConfig at end.
	//     * Each WorkspaceConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each WorkspaceConfig at start, followed by updates until now.
	//     * Each WorkspaceConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each WorkspaceConfig at start, followed by updates
	//     until end.
	//     * Each WorkspaceConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message WorkspaceConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	WorkspaceConfig value = 1;

	// Time holds the timestamp of this WorkspaceConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the WorkspaceConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message WorkspaceConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated WorkspaceConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each WorkspaceConfig at end.
	//     * Each WorkspaceConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each WorkspaceConfig at start, followed by updates until now.
	//     * Each WorkspaceConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each WorkspaceConfig at start, followed by updates
	//     until end.
	//     * Each WorkspaceConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message WorkspaceConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated WorkspaceConfigStreamResponse responses = 1;
};

message WorkspaceConfigSetRequest {
	// WorkspaceConfig carries the value to set into the datastore.
	// See the documentation on the WorkspaceConfig struct for which fields are required.
	WorkspaceConfig value = 1;
};

message WorkspaceConfigSetResponse {
	// Value carries all the values given in the WorkspaceConfigSetRequest as well
	// as any server-generated values.
	WorkspaceConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message WorkspaceConfigSetSomeRequest {
	// value contains a list of WorkspaceConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated WorkspaceConfig values = 1;
};

message WorkspaceConfigSetSomeResponse {
	WorkspaceKey key = 1;
	string error = 2;
};

message WorkspaceConfigDeleteRequest {
	// Key indicates which WorkspaceConfig instance to remove.
	// This field must always be set.
	WorkspaceKey key = 1;
};

message WorkspaceConfigDeleteResponse {
	// Key echoes back the key of the deleted WorkspaceConfig instance.
	WorkspaceKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message WorkspaceConfigDeleteSomeRequest {
	// key contains a list of WorkspaceConfig keys to delete
	repeated WorkspaceKey keys = 1;
};

// WorkspaceConfigDeleteSomeResponse is only sent when there is an error.
message WorkspaceConfigDeleteSomeResponse {
	WorkspaceKey key = 1;
	string error = 2;
};

message WorkspaceConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated WorkspaceConfig partial_eq_filter = 1;
};

message WorkspaceConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the WorkspaceConfig instance that failed to be deleted.
	WorkspaceKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service WorkspaceConfigService {
	rpc GetOne (WorkspaceConfigRequest) returns (WorkspaceConfigResponse);
	rpc GetSome (WorkspaceConfigSomeRequest) returns (stream WorkspaceConfigSomeResponse);
	rpc GetAll (WorkspaceConfigStreamRequest) returns (stream WorkspaceConfigStreamResponse);
	rpc Subscribe (WorkspaceConfigStreamRequest) returns (stream WorkspaceConfigStreamResponse);
	rpc GetMeta (WorkspaceConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (WorkspaceConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (WorkspaceConfigSetRequest) returns (WorkspaceConfigSetResponse);
	rpc SetSome (WorkspaceConfigSetSomeRequest) returns (stream WorkspaceConfigSetSomeResponse);
	rpc Delete (WorkspaceConfigDeleteRequest) returns (WorkspaceConfigDeleteResponse);
	rpc DeleteSome (WorkspaceConfigDeleteSomeRequest) returns (stream WorkspaceConfigDeleteSomeResponse);
	rpc DeleteAll (WorkspaceConfigDeleteAllRequest) returns (stream WorkspaceConfigDeleteAllResponse);
	rpc GetAllBatched (WorkspaceConfigBatchedStreamRequest) returns (stream WorkspaceConfigBatchedStreamResponse);
	rpc SubscribeBatched (WorkspaceConfigBatchedStreamRequest) returns (stream WorkspaceConfigBatchedStreamResponse);
}

message WorkspaceSyncConfigRequest {
	// Key uniquely identifies a WorkspaceSyncConfig instance to retrieve.
	// This value must be populated.
	WorkspaceSyncKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceSyncConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	WorkspaceSyncConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// WorkspaceSyncConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceSyncConfigSomeRequest {
	repeated WorkspaceSyncKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message WorkspaceSyncConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	WorkspaceSyncConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message WorkspaceSyncConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated WorkspaceSyncConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each WorkspaceSyncConfig at end.
	//     * Each WorkspaceSyncConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each WorkspaceSyncConfig at start, followed by updates until now.
	//     * Each WorkspaceSyncConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each WorkspaceSyncConfig at start, followed by updates
	//     until end.
	//     * Each WorkspaceSyncConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message WorkspaceSyncConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	WorkspaceSyncConfig value = 1;

	// Time holds the timestamp of this WorkspaceSyncConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the WorkspaceSyncConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message WorkspaceSyncConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated WorkspaceSyncConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each WorkspaceSyncConfig at end.
	//     * Each WorkspaceSyncConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each WorkspaceSyncConfig at start, followed by updates until now.
	//     * Each WorkspaceSyncConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each WorkspaceSyncConfig at start, followed by updates
	//     until end.
	//     * Each WorkspaceSyncConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message WorkspaceSyncConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated WorkspaceSyncConfigStreamResponse responses = 1;
};

message WorkspaceSyncConfigSetRequest {
	// WorkspaceSyncConfig carries the value to set into the datastore.
	// See the documentation on the WorkspaceSyncConfig struct for which fields are required.
	WorkspaceSyncConfig value = 1;
};

message WorkspaceSyncConfigSetResponse {
	// Value carries all the values given in the WorkspaceSyncConfigSetRequest as well
	// as any server-generated values.
	WorkspaceSyncConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message WorkspaceSyncConfigSetSomeRequest {
	// value contains a list of WorkspaceSyncConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated WorkspaceSyncConfig values = 1;
};

message WorkspaceSyncConfigSetSomeResponse {
	WorkspaceSyncKey key = 1;
	string error = 2;
};

message WorkspaceSyncConfigDeleteRequest {
	// Key indicates which WorkspaceSyncConfig instance to remove.
	// This field must always be set.
	WorkspaceSyncKey key = 1;
};

message WorkspaceSyncConfigDeleteResponse {
	// Key echoes back the key of the deleted WorkspaceSyncConfig instance.
	WorkspaceSyncKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message WorkspaceSyncConfigDeleteSomeRequest {
	// key contains a list of WorkspaceSyncConfig keys to delete
	repeated WorkspaceSyncKey keys = 1;
};

// WorkspaceSyncConfigDeleteSomeResponse is only sent when there is an error.
message WorkspaceSyncConfigDeleteSomeResponse {
	WorkspaceSyncKey key = 1;
	string error = 2;
};

message WorkspaceSyncConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated WorkspaceSyncConfig partial_eq_filter = 1;
};

message WorkspaceSyncConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the WorkspaceSyncConfig instance that failed to be deleted.
	WorkspaceSyncKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service WorkspaceSyncConfigService {
	rpc GetOne (WorkspaceSyncConfigRequest) returns (WorkspaceSyncConfigResponse);
	rpc GetSome (WorkspaceSyncConfigSomeRequest) returns (stream WorkspaceSyncConfigSomeResponse);
	rpc GetAll (WorkspaceSyncConfigStreamRequest) returns (stream WorkspaceSyncConfigStreamResponse);
	rpc Subscribe (WorkspaceSyncConfigStreamRequest) returns (stream WorkspaceSyncConfigStreamResponse);
	rpc GetMeta (WorkspaceSyncConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (WorkspaceSyncConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (WorkspaceSyncConfigSetRequest) returns (WorkspaceSyncConfigSetResponse);
	rpc SetSome (WorkspaceSyncConfigSetSomeRequest) returns (stream WorkspaceSyncConfigSetSomeResponse);
	rpc Delete (WorkspaceSyncConfigDeleteRequest) returns (WorkspaceSyncConfigDeleteResponse);
	rpc DeleteSome (WorkspaceSyncConfigDeleteSomeRequest) returns (stream WorkspaceSyncConfigDeleteSomeResponse);
	rpc DeleteAll (WorkspaceSyncConfigDeleteAllRequest) returns (stream WorkspaceSyncConfigDeleteAllResponse);
	rpc GetAllBatched (WorkspaceSyncConfigBatchedStreamRequest) returns (stream WorkspaceSyncConfigBatchedStreamResponse);
	rpc SubscribeBatched (WorkspaceSyncConfigBatchedStreamRequest) returns (stream WorkspaceSyncConfigBatchedStreamResponse);
}
