// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.tag.v1;
option go_package = "arista/resources/arista/tag.v1;tag";

import "arista/tag.v1/tag.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message DeviceTagRequest {
	// Key uniquely identifies a DeviceTag instance to retrieve.
	// This value must be populated.
	TagKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message DeviceTagResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DeviceTag value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceTag instance in this response.
	google.protobuf.Timestamp time = 2;
};

message DeviceTagStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DeviceTag partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message DeviceTagStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	DeviceTag value = 1;

	// Time holds the timestamp of this DeviceTag's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the DeviceTag value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service DeviceTagService {
	rpc GetOne (DeviceTagRequest) returns (DeviceTagResponse);
	rpc GetAll (DeviceTagStreamRequest) returns (stream DeviceTagStreamResponse);
	rpc Subscribe (DeviceTagStreamRequest) returns (stream DeviceTagStreamResponse);
}

message DeviceTagAssignmentConfigRequest {
	// Key uniquely identifies a DeviceTagAssignmentConfig instance to retrieve.
	// This value must be populated.
	DeviceTagAssignmentKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message DeviceTagAssignmentConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DeviceTagAssignmentConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceTagAssignmentConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message DeviceTagAssignmentConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DeviceTagAssignmentConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message DeviceTagAssignmentConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	DeviceTagAssignmentConfig value = 1;

	// Time holds the timestamp of this DeviceTagAssignmentConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the DeviceTagAssignmentConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message DeviceTagAssignmentConfigSetRequest {
	// DeviceTagAssignmentConfig carries the value to set into the datastore.
	// See the documentation on the DeviceTagAssignmentConfig struct for which fields are required.
	DeviceTagAssignmentConfig value = 1;
};

message DeviceTagAssignmentConfigSetResponse {
	// Value carries all the values given in the DeviceTagAssignmentConfigSetRequest as well
	// as any server-generated values.
	DeviceTagAssignmentConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message DeviceTagAssignmentConfigDeleteRequest {
	// Key indicates which DeviceTagAssignmentConfig instance to remove.
	// This field must always be set.
	DeviceTagAssignmentKey key = 1;
};

message DeviceTagAssignmentConfigDeleteResponse {
	// Key echoes back the key of the deleted DeviceTagAssignmentConfig instance.
	DeviceTagAssignmentKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message DeviceTagAssignmentConfigDeleteAllRequest {
};

message DeviceTagAssignmentConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the DeviceTagAssignmentConfig instance that failed to be deleted.
	DeviceTagAssignmentKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service DeviceTagAssignmentConfigService {
	rpc GetOne (DeviceTagAssignmentConfigRequest) returns (DeviceTagAssignmentConfigResponse);
	rpc GetAll (DeviceTagAssignmentConfigStreamRequest) returns (stream DeviceTagAssignmentConfigStreamResponse);
	rpc Subscribe (DeviceTagAssignmentConfigStreamRequest) returns (stream DeviceTagAssignmentConfigStreamResponse);
	rpc Set (DeviceTagAssignmentConfigSetRequest) returns (DeviceTagAssignmentConfigSetResponse);
	rpc Delete (DeviceTagAssignmentConfigDeleteRequest) returns (DeviceTagAssignmentConfigDeleteResponse);
	rpc DeleteAll (DeviceTagAssignmentConfigDeleteAllRequest) returns (stream DeviceTagAssignmentConfigDeleteAllResponse);
}

message DeviceTagConfigRequest {
	// Key uniquely identifies a DeviceTagConfig instance to retrieve.
	// This value must be populated.
	TagKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message DeviceTagConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DeviceTagConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceTagConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message DeviceTagConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DeviceTagConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message DeviceTagConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	DeviceTagConfig value = 1;

	// Time holds the timestamp of this DeviceTagConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the DeviceTagConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message DeviceTagConfigSetRequest {
	// DeviceTagConfig carries the value to set into the datastore.
	// See the documentation on the DeviceTagConfig struct for which fields are required.
	DeviceTagConfig value = 1;
};

message DeviceTagConfigSetResponse {
	// Value carries all the values given in the DeviceTagConfigSetRequest as well
	// as any server-generated values.
	DeviceTagConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message DeviceTagConfigDeleteRequest {
	// Key indicates which DeviceTagConfig instance to remove.
	// This field must always be set.
	TagKey key = 1;
};

message DeviceTagConfigDeleteResponse {
	// Key echoes back the key of the deleted DeviceTagConfig instance.
	TagKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message DeviceTagConfigDeleteAllRequest {
};

message DeviceTagConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the DeviceTagConfig instance that failed to be deleted.
	TagKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service DeviceTagConfigService {
	rpc GetOne (DeviceTagConfigRequest) returns (DeviceTagConfigResponse);
	rpc GetAll (DeviceTagConfigStreamRequest) returns (stream DeviceTagConfigStreamResponse);
	rpc Subscribe (DeviceTagConfigStreamRequest) returns (stream DeviceTagConfigStreamResponse);
	rpc Set (DeviceTagConfigSetRequest) returns (DeviceTagConfigSetResponse);
	rpc Delete (DeviceTagConfigDeleteRequest) returns (DeviceTagConfigDeleteResponse);
	rpc DeleteAll (DeviceTagConfigDeleteAllRequest) returns (stream DeviceTagConfigDeleteAllResponse);
}

message InterfaceTagRequest {
	// Key uniquely identifies a InterfaceTag instance to retrieve.
	// This value must be populated.
	TagKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	InterfaceTag value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// InterfaceTag instance in this response.
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated InterfaceTag partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message InterfaceTagStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	InterfaceTag value = 1;

	// Time holds the timestamp of this InterfaceTag's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the InterfaceTag value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service InterfaceTagService {
	rpc GetOne (InterfaceTagRequest) returns (InterfaceTagResponse);
	rpc GetAll (InterfaceTagStreamRequest) returns (stream InterfaceTagStreamResponse);
	rpc Subscribe (InterfaceTagStreamRequest) returns (stream InterfaceTagStreamResponse);
}

message InterfaceTagAssignmentConfigRequest {
	// Key uniquely identifies a InterfaceTagAssignmentConfig instance to retrieve.
	// This value must be populated.
	InterfaceTagAssignmentKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagAssignmentConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	InterfaceTagAssignmentConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// InterfaceTagAssignmentConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagAssignmentConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated InterfaceTagAssignmentConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message InterfaceTagAssignmentConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	InterfaceTagAssignmentConfig value = 1;

	// Time holds the timestamp of this InterfaceTagAssignmentConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the InterfaceTagAssignmentConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message InterfaceTagAssignmentConfigSetRequest {
	// InterfaceTagAssignmentConfig carries the value to set into the datastore.
	// See the documentation on the InterfaceTagAssignmentConfig struct for which fields are required.
	InterfaceTagAssignmentConfig value = 1;
};

message InterfaceTagAssignmentConfigSetResponse {
	// Value carries all the values given in the InterfaceTagAssignmentConfigSetRequest as well
	// as any server-generated values.
	InterfaceTagAssignmentConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagAssignmentConfigDeleteRequest {
	// Key indicates which InterfaceTagAssignmentConfig instance to remove.
	// This field must always be set.
	InterfaceTagAssignmentKey key = 1;
};

message InterfaceTagAssignmentConfigDeleteResponse {
	// Key echoes back the key of the deleted InterfaceTagAssignmentConfig instance.
	InterfaceTagAssignmentKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagAssignmentConfigDeleteAllRequest {
};

message InterfaceTagAssignmentConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the InterfaceTagAssignmentConfig instance that failed to be deleted.
	InterfaceTagAssignmentKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service InterfaceTagAssignmentConfigService {
	rpc GetOne (InterfaceTagAssignmentConfigRequest) returns (InterfaceTagAssignmentConfigResponse);
	rpc GetAll (InterfaceTagAssignmentConfigStreamRequest) returns (stream InterfaceTagAssignmentConfigStreamResponse);
	rpc Subscribe (InterfaceTagAssignmentConfigStreamRequest) returns (stream InterfaceTagAssignmentConfigStreamResponse);
	rpc Set (InterfaceTagAssignmentConfigSetRequest) returns (InterfaceTagAssignmentConfigSetResponse);
	rpc Delete (InterfaceTagAssignmentConfigDeleteRequest) returns (InterfaceTagAssignmentConfigDeleteResponse);
	rpc DeleteAll (InterfaceTagAssignmentConfigDeleteAllRequest) returns (stream InterfaceTagAssignmentConfigDeleteAllResponse);
}

message InterfaceTagConfigRequest {
	// Key uniquely identifies a InterfaceTagConfig instance to retrieve.
	// This value must be populated.
	TagKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	InterfaceTagConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// InterfaceTagConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated InterfaceTagConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message InterfaceTagConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	InterfaceTagConfig value = 1;

	// Time holds the timestamp of this InterfaceTagConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the InterfaceTagConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message InterfaceTagConfigSetRequest {
	// InterfaceTagConfig carries the value to set into the datastore.
	// See the documentation on the InterfaceTagConfig struct for which fields are required.
	InterfaceTagConfig value = 1;
};

message InterfaceTagConfigSetResponse {
	// Value carries all the values given in the InterfaceTagConfigSetRequest as well
	// as any server-generated values.
	InterfaceTagConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagConfigDeleteRequest {
	// Key indicates which InterfaceTagConfig instance to remove.
	// This field must always be set.
	TagKey key = 1;
};

message InterfaceTagConfigDeleteResponse {
	// Key echoes back the key of the deleted InterfaceTagConfig instance.
	TagKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message InterfaceTagConfigDeleteAllRequest {
};

message InterfaceTagConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the InterfaceTagConfig instance that failed to be deleted.
	TagKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service InterfaceTagConfigService {
	rpc GetOne (InterfaceTagConfigRequest) returns (InterfaceTagConfigResponse);
	rpc GetAll (InterfaceTagConfigStreamRequest) returns (stream InterfaceTagConfigStreamResponse);
	rpc Subscribe (InterfaceTagConfigStreamRequest) returns (stream InterfaceTagConfigStreamResponse);
	rpc Set (InterfaceTagConfigSetRequest) returns (InterfaceTagConfigSetResponse);
	rpc Delete (InterfaceTagConfigDeleteRequest) returns (InterfaceTagConfigDeleteResponse);
	rpc DeleteAll (InterfaceTagConfigDeleteAllRequest) returns (stream InterfaceTagConfigDeleteAllResponse);
}
