// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.dashboard.v1;
option go_package = "github.com/aristanetworks/cloudvision-go/api/arista/dashboard.v1;dashboard";

import "arista/dashboard.v1/dashboard.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message MetaResponse {
	// Time holds the timestamp of the last item included in the metadata calculation.
	google.protobuf.Timestamp time = 1;

	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 2;

	// Count is the number of items present under the conditions of the request.
	google.protobuf.UInt32Value count = 3;
};

message DashboardRequest {
	// Key uniquely identifies a Dashboard instance to retrieve.
	// This value must be populated.
	DashboardKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message DashboardResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Dashboard value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Dashboard instance in this response.
	google.protobuf.Timestamp time = 2;
};

message DashboardSomeRequest {
	repeated DashboardKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message DashboardSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Dashboard value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message DashboardStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Dashboard partial_eq_filter = 1;
	// For each Dashboard in the list, all populated fields are considered ANDed together
	// as a filtering operation. Similarly, the list itself is ORed such that any individual
	// filter that matches a given Dashboard is streamed to the user.
	repeated Filter filter = 2;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Dashboard at end.
	//     * Each Dashboard response is fully-specified (all fields set).
	//   * start: Returns the state of each Dashboard at start, followed by updates until now.
	//     * Each Dashboard response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Dashboard at start, followed by updates
	//     until end.
	//     * Each Dashboard response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message DashboardStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Dashboard value = 1;

	// Time holds the timestamp of this Dashboard's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Dashboard value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service DashboardService {
	rpc GetOne (DashboardRequest) returns (DashboardResponse);
	rpc GetSome (DashboardSomeRequest) returns (stream DashboardSomeResponse);
	rpc GetAll (DashboardStreamRequest) returns (stream DashboardStreamResponse);
	rpc Subscribe (DashboardStreamRequest) returns (stream DashboardStreamResponse);
	rpc GetMeta (DashboardStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (DashboardStreamRequest) returns (stream MetaResponse);
}

message DashboardConfigRequest {
	// Key uniquely identifies a DashboardConfig instance to retrieve.
	// This value must be populated.
	DashboardKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message DashboardConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DashboardConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// DashboardConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message DashboardConfigSomeRequest {
	repeated DashboardKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message DashboardConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DashboardConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message DashboardConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DashboardConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each DashboardConfig at end.
	//     * Each DashboardConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each DashboardConfig at start, followed by updates until now.
	//     * Each DashboardConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each DashboardConfig at start, followed by updates
	//     until end.
	//     * Each DashboardConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message DashboardConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	DashboardConfig value = 1;

	// Time holds the timestamp of this DashboardConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the DashboardConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message DashboardConfigSetRequest {
	// DashboardConfig carries the value to set into the datastore.
	// See the documentation on the DashboardConfig struct for which fields are required.
	DashboardConfig value = 1;
};

message DashboardConfigSetResponse {
	// Value carries all the values given in the DashboardConfigSetRequest as well
	// as any server-generated values.
	DashboardConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message DashboardConfigSetSomeRequest {
	// value contains a list of DashboardConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated DashboardConfig values = 1;
};

message DashboardConfigSetSomeResponse {
	DashboardKey key = 1;
	string error = 2;
};

message DashboardConfigDeleteRequest {
	// Key indicates which DashboardConfig instance to remove.
	// This field must always be set.
	DashboardKey key = 1;
};

message DashboardConfigDeleteResponse {
	// Key echoes back the key of the deleted DashboardConfig instance.
	DashboardKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message DashboardConfigDeleteSomeRequest {
	// key contains a list of DashboardConfig keys to delete
	repeated DashboardKey keys = 1;
};

// DashboardConfigDeleteSomeResponse is only sent when there is an error.
message DashboardConfigDeleteSomeResponse {
	DashboardKey key = 1;
	string error = 2;
};

message DashboardConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated DashboardConfig partial_eq_filter = 1;
};

message DashboardConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the DashboardConfig instance that failed to be deleted.
	DashboardKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service DashboardConfigService {
	rpc GetOne (DashboardConfigRequest) returns (DashboardConfigResponse);
	rpc GetSome (DashboardConfigSomeRequest) returns (stream DashboardConfigSomeResponse);
	rpc GetAll (DashboardConfigStreamRequest) returns (stream DashboardConfigStreamResponse);
	rpc Subscribe (DashboardConfigStreamRequest) returns (stream DashboardConfigStreamResponse);
	rpc GetMeta (DashboardConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (DashboardConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (DashboardConfigSetRequest) returns (DashboardConfigSetResponse);
	rpc SetSome (DashboardConfigSetSomeRequest) returns (stream DashboardConfigSetSomeResponse);
	rpc Delete (DashboardConfigDeleteRequest) returns (DashboardConfigDeleteResponse);
	rpc DeleteSome (DashboardConfigDeleteSomeRequest) returns (stream DashboardConfigDeleteSomeResponse);
	rpc DeleteAll (DashboardConfigDeleteAllRequest) returns (stream DashboardConfigDeleteAllResponse);
}

message GlobalDashboardConfigRequest {

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message GlobalDashboardConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	GlobalDashboardConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// GlobalDashboardConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message GlobalDashboardConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated GlobalDashboardConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each GlobalDashboardConfig at end.
	//     * Each GlobalDashboardConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each GlobalDashboardConfig at start, followed by updates until now.
	//     * Each GlobalDashboardConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each GlobalDashboardConfig at start, followed by updates
	//     until end.
	//     * Each GlobalDashboardConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message GlobalDashboardConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	GlobalDashboardConfig value = 1;

	// Time holds the timestamp of this GlobalDashboardConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the GlobalDashboardConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message GlobalDashboardConfigSetRequest {
	// GlobalDashboardConfig carries the value to set into the datastore.
	// See the documentation on the GlobalDashboardConfig struct for which fields are required.
	GlobalDashboardConfig value = 1;
};

message GlobalDashboardConfigSetResponse {
	// Value carries all the values given in the GlobalDashboardConfigSetRequest as well
	// as any server-generated values.
	GlobalDashboardConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

service GlobalDashboardConfigService {
	rpc GetOne (GlobalDashboardConfigRequest) returns (GlobalDashboardConfigResponse);
	
	rpc GetAll (GlobalDashboardConfigStreamRequest) returns (stream GlobalDashboardConfigStreamResponse);
	rpc Subscribe (GlobalDashboardConfigStreamRequest) returns (stream GlobalDashboardConfigStreamResponse);
	
	rpc SubscribeMeta (GlobalDashboardConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (GlobalDashboardConfigSetRequest) returns (GlobalDashboardConfigSetResponse);
	
	
}
