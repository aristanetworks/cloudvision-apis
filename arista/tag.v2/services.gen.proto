// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.tag.v2;
option go_package = "arista/resources/arista/tag.v2;tag";

import "arista/tag.v2/tag.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message TagRequest {
	// Key uniquely identifies a Tag instance to retrieve.
	// This value must be populated.
	TagKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TagResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Tag value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Tag instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TagStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Tag partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Tag at end.
	//     * Each Tag response is fully-specified (all fields set).
	//   * start: Returns the state of each Tag at start, followed by updates until now.
	//     * Each Tag response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Tag at start, followed by updates
	//     until end.
	//     * Each Tag response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TagStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Tag value = 1;

	// Time holds the timestamp of this Tag's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Tag value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service TagService {
	rpc GetOne (TagRequest) returns (TagResponse);
	rpc GetAll (TagStreamRequest) returns (stream TagStreamResponse);
	rpc Subscribe (TagStreamRequest) returns (stream TagStreamResponse);
}

message TagAssignmentRequest {
	// Key uniquely identifies a TagAssignment instance to retrieve.
	// This value must be populated.
	TagAssignmentKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TagAssignmentResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TagAssignment value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TagAssignment instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TagAssignmentStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TagAssignment partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TagAssignment at end.
	//     * Each TagAssignment response is fully-specified (all fields set).
	//   * start: Returns the state of each TagAssignment at start, followed by updates until now.
	//     * Each TagAssignment response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TagAssignment at start, followed by updates
	//     until end.
	//     * Each TagAssignment response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TagAssignmentStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TagAssignment value = 1;

	// Time holds the timestamp of this TagAssignment's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TagAssignment value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service TagAssignmentService {
	rpc GetOne (TagAssignmentRequest) returns (TagAssignmentResponse);
	rpc GetAll (TagAssignmentStreamRequest) returns (stream TagAssignmentStreamResponse);
	rpc Subscribe (TagAssignmentStreamRequest) returns (stream TagAssignmentStreamResponse);
}

message TagAssignmentConfigRequest {
	// Key uniquely identifies a TagAssignmentConfig instance to retrieve.
	// This value must be populated.
	TagAssignmentKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TagAssignmentConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TagAssignmentConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TagAssignmentConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TagAssignmentConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TagAssignmentConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TagAssignmentConfig at end.
	//     * Each TagAssignmentConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TagAssignmentConfig at start, followed by updates until now.
	//     * Each TagAssignmentConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TagAssignmentConfig at start, followed by updates
	//     until end.
	//     * Each TagAssignmentConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TagAssignmentConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TagAssignmentConfig value = 1;

	// Time holds the timestamp of this TagAssignmentConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TagAssignmentConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message TagAssignmentConfigSetRequest {
	// TagAssignmentConfig carries the value to set into the datastore.
	// See the documentation on the TagAssignmentConfig struct for which fields are required.
	TagAssignmentConfig value = 1;
};

message TagAssignmentConfigSetResponse {
	// Value carries all the values given in the TagAssignmentConfigSetRequest as well
	// as any server-generated values.
	TagAssignmentConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TagAssignmentConfigSetSomeRequest {
	// value contains a list of TagAssignmentConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated TagAssignmentConfig values = 1;
};

message TagAssignmentConfigSetSomeResponse {
	TagAssignmentKey key = 1;
	string error = 2;
};

message TagAssignmentConfigDeleteRequest {
	// Key indicates which TagAssignmentConfig instance to remove.
	// This field must always be set.
	TagAssignmentKey key = 1;
};

message TagAssignmentConfigDeleteResponse {
	// Key echoes back the key of the deleted TagAssignmentConfig instance.
	TagAssignmentKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TagAssignmentConfigDeleteAllRequest {
};

message TagAssignmentConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the TagAssignmentConfig instance that failed to be deleted.
	TagAssignmentKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service TagAssignmentConfigService {
	rpc GetOne (TagAssignmentConfigRequest) returns (TagAssignmentConfigResponse);
	rpc GetAll (TagAssignmentConfigStreamRequest) returns (stream TagAssignmentConfigStreamResponse);
	rpc Subscribe (TagAssignmentConfigStreamRequest) returns (stream TagAssignmentConfigStreamResponse);
	rpc Set (TagAssignmentConfigSetRequest) returns (TagAssignmentConfigSetResponse);
	rpc SetSome (TagAssignmentConfigSetSomeRequest) returns (stream TagAssignmentConfigSetSomeResponse);
	rpc Delete (TagAssignmentConfigDeleteRequest) returns (TagAssignmentConfigDeleteResponse);
	rpc DeleteAll (TagAssignmentConfigDeleteAllRequest) returns (stream TagAssignmentConfigDeleteAllResponse);
}

message TagConfigRequest {
	// Key uniquely identifies a TagConfig instance to retrieve.
	// This value must be populated.
	TagKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TagConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TagConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TagConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TagConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TagConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TagConfig at end.
	//     * Each TagConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TagConfig at start, followed by updates until now.
	//     * Each TagConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TagConfig at start, followed by updates
	//     until end.
	//     * Each TagConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TagConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TagConfig value = 1;

	// Time holds the timestamp of this TagConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TagConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message TagConfigSetRequest {
	// TagConfig carries the value to set into the datastore.
	// See the documentation on the TagConfig struct for which fields are required.
	TagConfig value = 1;
};

message TagConfigSetResponse {
	// Value carries all the values given in the TagConfigSetRequest as well
	// as any server-generated values.
	TagConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TagConfigSetSomeRequest {
	// value contains a list of TagConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated TagConfig values = 1;
};

message TagConfigSetSomeResponse {
	TagKey key = 1;
	string error = 2;
};

message TagConfigDeleteRequest {
	// Key indicates which TagConfig instance to remove.
	// This field must always be set.
	TagKey key = 1;
};

message TagConfigDeleteResponse {
	// Key echoes back the key of the deleted TagConfig instance.
	TagKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TagConfigDeleteAllRequest {
};

message TagConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the TagConfig instance that failed to be deleted.
	TagKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service TagConfigService {
	rpc GetOne (TagConfigRequest) returns (TagConfigResponse);
	rpc GetAll (TagConfigStreamRequest) returns (stream TagConfigStreamResponse);
	rpc Subscribe (TagConfigStreamRequest) returns (stream TagConfigStreamResponse);
	rpc Set (TagConfigSetRequest) returns (TagConfigSetResponse);
	rpc SetSome (TagConfigSetSomeRequest) returns (stream TagConfigSetSomeResponse);
	rpc Delete (TagConfigDeleteRequest) returns (TagConfigDeleteResponse);
	rpc DeleteAll (TagConfigDeleteAllRequest) returns (stream TagConfigDeleteAllResponse);
}
