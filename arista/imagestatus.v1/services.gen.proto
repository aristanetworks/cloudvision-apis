// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.imagestatus.v1;
option go_package = "github.com/aristanetworks/cloudvision-go/api/arista/imagestatus.v1;imagestatus";

option java_package = "com.arista.imagestatus.v1";
option java_outer_classname = "ImagestatusServices";
option java_multiple_files = true;

import "arista/imagestatus.v1/imagestatus.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message MetaResponse {
	// Time holds the timestamp of the last item included in the metadata calculation.
	google.protobuf.Timestamp time = 1;

	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 2;

	// Count is the number of items present under the conditions of the request.
	google.protobuf.UInt32Value count = 3;
};

message SummaryRequest {
	// Key uniquely identifies a Summary instance to retrieve.
	// This value must be populated.
	SummaryKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message SummaryResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Summary value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Summary instance in this response.
	google.protobuf.Timestamp time = 2;
};

message SummarySomeRequest {
	repeated SummaryKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message SummarySomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Summary value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message SummaryStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Summary partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Summary at end.
	//     * Each Summary response is fully-specified (all fields set).
	//   * start: Returns the state of each Summary at start, followed by updates until now.
	//     * Each Summary response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Summary at start, followed by updates
	//     until end.
	//     * Each Summary response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message SummaryStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Summary value = 1;

	// Time holds the timestamp of this Summary's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Summary value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message SummaryBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Summary partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Summary at end.
	//     * Each Summary response is fully-specified (all fields set).
	//   * start: Returns the state of each Summary at start, followed by updates until now.
	//     * Each Summary response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Summary at start, followed by updates
	//     until end.
	//     * Each Summary response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message SummaryBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated SummaryStreamResponse responses = 1;
};

service SummaryService {
	rpc GetOne (SummaryRequest) returns (SummaryResponse);
	rpc GetSome (SummarySomeRequest) returns (stream SummarySomeResponse);
	rpc GetAll (SummaryStreamRequest) returns (stream SummaryStreamResponse);
	rpc Subscribe (SummaryStreamRequest) returns (stream SummaryStreamResponse);
	rpc GetMeta (SummaryStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (SummaryStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (SummaryBatchedStreamRequest) returns (stream SummaryBatchedStreamResponse);
	rpc SubscribeBatched (SummaryBatchedStreamRequest) returns (stream SummaryBatchedStreamResponse);
}
