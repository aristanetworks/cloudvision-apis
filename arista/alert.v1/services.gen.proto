// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Subject to Arista Networks, Inc.'s EULA.
// FOR INTERNAL USE ONLY. NOT FOR DISTRIBUTION.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.alert.v1;
option go_package = "arista/resources/arista/alert.v1;alert";

import "arista/alert.v1/alert.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message AlertRequest {

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AlertResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Alert value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Alert instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AlertStreamRequest {

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Alert at end.
	//     * Each Alert response is fully-specified (all fields set).
	//   * start: Returns the state of each Alert at start, followed by updates until now.
	//     * Each Alert response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Alert at start, followed by updates
	//     until end.
	//     * Each Alert response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AlertStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Alert value = 1;

	// Time holds the timestamp of this Alert's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Alert value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service AlertService {
	rpc GetOne (AlertRequest) returns (AlertResponse);
	
	rpc Subscribe (AlertStreamRequest) returns (stream AlertStreamResponse);
}

message AlertConfigRequest {

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AlertConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AlertConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// AlertConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AlertConfigStreamRequest {

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AlertConfig at end.
	//     * Each AlertConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each AlertConfig at start, followed by updates until now.
	//     * Each AlertConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AlertConfig at start, followed by updates
	//     until end.
	//     * Each AlertConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AlertConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	AlertConfig value = 1;

	// Time holds the timestamp of this AlertConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the AlertConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message AlertConfigSetRequest {
	// AlertConfig carries the value to set into the datastore.
	// See the documentation on the AlertConfig struct for which fields are required.
	AlertConfig value = 1;
};

message AlertConfigSetResponse {
	// Value carries all the values given in the AlertConfigSetRequest as well
	// as any server-generated values.
	AlertConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

service AlertConfigService {
	rpc GetOne (AlertConfigRequest) returns (AlertConfigResponse);
	
	rpc Subscribe (AlertConfigStreamRequest) returns (stream AlertConfigStreamResponse);
	rpc Set (AlertConfigSetRequest) returns (AlertConfigSetResponse);
	
	
}

message TemplateConfigRequest {
	// Key uniquely identifies a TemplateConfig instance to retrieve.
	// This value must be populated.
	TemplateKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TemplateConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TemplateConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TemplateConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TemplateConfigStreamRequest {

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TemplateConfig at end.
	//     * Each TemplateConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TemplateConfig at start, followed by updates until now.
	//     * Each TemplateConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TemplateConfig at start, followed by updates
	//     until end.
	//     * Each TemplateConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TemplateConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TemplateConfig value = 1;

	// Time holds the timestamp of this TemplateConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TemplateConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message TemplateConfigSetRequest {
	// TemplateConfig carries the value to set into the datastore.
	// See the documentation on the TemplateConfig struct for which fields are required.
	TemplateConfig value = 1;
};

message TemplateConfigSetResponse {
	// Value carries all the values given in the TemplateConfigSetRequest as well
	// as any server-generated values.
	TemplateConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TemplateConfigSetSomeRequest {
	// value contains a list of TemplateConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated TemplateConfig values = 1;
};

message TemplateConfigSetSomeResponse {
	TemplateKey key = 1;
	string error = 2;
};

message TemplateConfigDeleteRequest {
	// Key indicates which TemplateConfig instance to remove.
	// This field must always be set.
	TemplateKey key = 1;
};

message TemplateConfigDeleteResponse {
	// Key echoes back the key of the deleted TemplateConfig instance.
	TemplateKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TemplateConfigDeleteAllRequest {
};

message TemplateConfigDeleteAllResponse {
	// This describes the class of delete error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the TemplateConfig instance that failed to be deleted.
	TemplateKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service TemplateConfigService {
	rpc GetOne (TemplateConfigRequest) returns (TemplateConfigResponse);
	rpc GetAll (TemplateConfigStreamRequest) returns (stream TemplateConfigStreamResponse);
	rpc Subscribe (TemplateConfigStreamRequest) returns (stream TemplateConfigStreamResponse);
	rpc Set (TemplateConfigSetRequest) returns (TemplateConfigSetResponse);
	rpc SetSome (TemplateConfigSetSomeRequest) returns (stream TemplateConfigSetSomeResponse);
	rpc Delete (TemplateConfigDeleteRequest) returns (TemplateConfigDeleteResponse);
	rpc DeleteAll (TemplateConfigDeleteAllRequest) returns (stream TemplateConfigDeleteAllResponse);
}
