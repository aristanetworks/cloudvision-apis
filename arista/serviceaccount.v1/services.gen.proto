// Copyright (c) 2020 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.serviceaccount.v1;
option go_package = "github.com/aristanetworks/cloudvision-go/api/arista/serviceaccount.v1;serviceaccount";

import "arista/serviceaccount.v1/serviceaccount.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message MetaResponse {
	// Time holds the timestamp of the last item included in the metadata calculation.
	google.protobuf.Timestamp time = 1;

	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 2;

	// Count is the number of items present under the conditions of the request.
	google.protobuf.UInt32Value count = 3;
};

message AccountRequest {
	// Key uniquely identifies a Account instance to retrieve.
	// This value must be populated.
	AccountKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AccountResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Account value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Account instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AccountSomeRequest {
	repeated AccountKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AccountSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Account value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message AccountStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Account partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Account at end.
	//     * Each Account response is fully-specified (all fields set).
	//   * start: Returns the state of each Account at start, followed by updates until now.
	//     * Each Account response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Account at start, followed by updates
	//     until end.
	//     * Each Account response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AccountStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Account value = 1;

	// Time holds the timestamp of this Account's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Account value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service AccountService {
	rpc GetOne (AccountRequest) returns (AccountResponse);
	rpc GetSome (AccountSomeRequest) returns (stream AccountSomeResponse);
	rpc GetAll (AccountStreamRequest) returns (stream AccountStreamResponse);
	rpc Subscribe (AccountStreamRequest) returns (stream AccountStreamResponse);
	rpc GetMeta (AccountStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (AccountStreamRequest) returns (stream MetaResponse);
}

message AccountConfigRequest {
	// Key uniquely identifies a AccountConfig instance to retrieve.
	// This value must be populated.
	AccountKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AccountConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AccountConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// AccountConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message AccountConfigSomeRequest {
	repeated AccountKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message AccountConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	AccountConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message AccountConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated AccountConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each AccountConfig at end.
	//     * Each AccountConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each AccountConfig at start, followed by updates until now.
	//     * Each AccountConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each AccountConfig at start, followed by updates
	//     until end.
	//     * Each AccountConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message AccountConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	AccountConfig value = 1;

	// Time holds the timestamp of this AccountConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the AccountConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message AccountConfigSetRequest {
	// AccountConfig carries the value to set into the datastore.
	// See the documentation on the AccountConfig struct for which fields are required.
	AccountConfig value = 1;
};

message AccountConfigSetResponse {
	// Value carries all the values given in the AccountConfigSetRequest as well
	// as any server-generated values.
	AccountConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message AccountConfigSetSomeRequest {
	// value contains a list of AccountConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated AccountConfig values = 1;
};

message AccountConfigSetSomeResponse {
	AccountKey key = 1;
	string error = 2;
};

message AccountConfigDeleteRequest {
	// Key indicates which AccountConfig instance to remove.
	// This field must always be set.
	AccountKey key = 1;
};

message AccountConfigDeleteResponse {
	// Key echoes back the key of the deleted AccountConfig instance.
	AccountKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message AccountConfigDeleteSomeRequest {
	// key contains a list of AccountConfig keys to delete
	repeated AccountKey keys = 1;
};

// AccountConfigDeleteSomeResponse is only sent when there is an error.
message AccountConfigDeleteSomeResponse {
	AccountKey key = 1;
	string error = 2;
};

message AccountConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated AccountConfig partial_eq_filter = 1;
};

message AccountConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the AccountConfig instance that failed to be deleted.
	AccountKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service AccountConfigService {
	rpc GetOne (AccountConfigRequest) returns (AccountConfigResponse);
	rpc GetSome (AccountConfigSomeRequest) returns (stream AccountConfigSomeResponse);
	rpc GetAll (AccountConfigStreamRequest) returns (stream AccountConfigStreamResponse);
	rpc Subscribe (AccountConfigStreamRequest) returns (stream AccountConfigStreamResponse);
	rpc GetMeta (AccountConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (AccountConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (AccountConfigSetRequest) returns (AccountConfigSetResponse);
	rpc SetSome (AccountConfigSetSomeRequest) returns (stream AccountConfigSetSomeResponse);
	rpc Delete (AccountConfigDeleteRequest) returns (AccountConfigDeleteResponse);
	rpc DeleteSome (AccountConfigDeleteSomeRequest) returns (stream AccountConfigDeleteSomeResponse);
	rpc DeleteAll (AccountConfigDeleteAllRequest) returns (stream AccountConfigDeleteAllResponse);
}

message TokenRequest {
	// Key uniquely identifies a Token instance to retrieve.
	// This value must be populated.
	TokenKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TokenResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Token value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Token instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TokenSomeRequest {
	repeated TokenKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TokenSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Token value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message TokenStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Token partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Token at end.
	//     * Each Token response is fully-specified (all fields set).
	//   * start: Returns the state of each Token at start, followed by updates until now.
	//     * Each Token response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Token at start, followed by updates
	//     until end.
	//     * Each Token response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TokenStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Token value = 1;

	// Time holds the timestamp of this Token's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Token value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

service TokenService {
	rpc GetOne (TokenRequest) returns (TokenResponse);
	rpc GetSome (TokenSomeRequest) returns (stream TokenSomeResponse);
	rpc GetAll (TokenStreamRequest) returns (stream TokenStreamResponse);
	rpc Subscribe (TokenStreamRequest) returns (stream TokenStreamResponse);
	rpc GetMeta (TokenStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (TokenStreamRequest) returns (stream MetaResponse);
}

message TokenConfigRequest {
	// Key uniquely identifies a TokenConfig instance to retrieve.
	// This value must be populated.
	TokenKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TokenConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TokenConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// TokenConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message TokenConfigSomeRequest {
	repeated TokenKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message TokenConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	TokenConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message TokenConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated TokenConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each TokenConfig at end.
	//     * Each TokenConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each TokenConfig at start, followed by updates until now.
	//     * Each TokenConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each TokenConfig at start, followed by updates
	//     until end.
	//     * Each TokenConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message TokenConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	TokenConfig value = 1;

	// Time holds the timestamp of this TokenConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the TokenConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message TokenConfigSetRequest {
	// TokenConfig carries the value to set into the datastore.
	// See the documentation on the TokenConfig struct for which fields are required.
	TokenConfig value = 1;
};

message TokenConfigSetResponse {
	// Value carries all the values given in the TokenConfigSetRequest as well
	// as any server-generated values.
	TokenConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TokenConfigSetSomeRequest {
	// value contains a list of TokenConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated TokenConfig values = 1;
};

message TokenConfigSetSomeResponse {
	TokenKey key = 1;
	string error = 2;
};

message TokenConfigDeleteRequest {
	// Key indicates which TokenConfig instance to remove.
	// This field must always be set.
	TokenKey key = 1;
};

message TokenConfigDeleteResponse {
	// Key echoes back the key of the deleted TokenConfig instance.
	TokenKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message TokenConfigDeleteSomeRequest {
	// key contains a list of TokenConfig keys to delete
	repeated TokenKey keys = 1;
};

// TokenConfigDeleteSomeResponse is only sent when there is an error.
message TokenConfigDeleteSomeResponse {
	TokenKey key = 1;
	string error = 2;
};

message TokenConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated TokenConfig partial_eq_filter = 1;
};

message TokenConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the TokenConfig instance that failed to be deleted.
	TokenKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service TokenConfigService {
	rpc GetOne (TokenConfigRequest) returns (TokenConfigResponse);
	rpc GetSome (TokenConfigSomeRequest) returns (stream TokenConfigSomeResponse);
	rpc GetAll (TokenConfigStreamRequest) returns (stream TokenConfigStreamResponse);
	rpc Subscribe (TokenConfigStreamRequest) returns (stream TokenConfigStreamResponse);
	rpc GetMeta (TokenConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (TokenConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (TokenConfigSetRequest) returns (TokenConfigSetResponse);
	rpc SetSome (TokenConfigSetSomeRequest) returns (stream TokenConfigSetSomeResponse);
	rpc Delete (TokenConfigDeleteRequest) returns (TokenConfigDeleteResponse);
	rpc DeleteSome (TokenConfigDeleteSomeRequest) returns (stream TokenConfigDeleteSomeResponse);
	rpc DeleteAll (TokenConfigDeleteAllRequest) returns (stream TokenConfigDeleteAllResponse);
}
