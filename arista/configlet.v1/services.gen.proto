// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the COPYING file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.configlet.v1;
option go_package = "github.com/aristanetworks/cloudvision-go/api/arista/configlet.v1;configlet";

import "arista/configlet.v1/configlet.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message MetaResponse {
	// Time holds the timestamp of the last item included in the metadata calculation.
	google.protobuf.Timestamp time = 1;

	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 2;

	// Count is the number of items present under the conditions of the request.
	google.protobuf.UInt32Value count = 3;
};

message ConfigletRequest {
	// Key uniquely identifies a Configlet instance to retrieve.
	// This value must be populated.
	ConfigletKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ConfigletResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Configlet value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// Configlet instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ConfigletSomeRequest {
	repeated ConfigletKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ConfigletSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Configlet value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message ConfigletStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Configlet partial_eq_filter = 1;
	// For each Configlet in the list, all populated fields are considered ANDed together
	// as a filtering operation. Similarly, the list itself is ORed such that any individual
	// filter that matches a given Configlet is streamed to the user.
	Filter filter = 2;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Configlet at end.
	//     * Each Configlet response is fully-specified (all fields set).
	//   * start: Returns the state of each Configlet at start, followed by updates until now.
	//     * Each Configlet response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Configlet at start, followed by updates
	//     until end.
	//     * Each Configlet response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ConfigletStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Configlet value = 1;

	// Time holds the timestamp of this Configlet's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the Configlet value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message ConfigletBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Configlet partial_eq_filter = 1;
	// For each Configlet in the list, all populated fields are considered ANDed together
	// as a filtering operation. Similarly, the list itself is ORed such that any individual
	// filter that matches a given Configlet is streamed to the user.
	Filter filter = 2;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Configlet at end.
	//     * Each Configlet response is fully-specified (all fields set).
	//   * start: Returns the state of each Configlet at start, followed by updates until now.
	//     * Each Configlet response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Configlet at start, followed by updates
	//     until end.
	//     * Each Configlet response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message ConfigletBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated ConfigletStreamResponse responses = 1;
};

service ConfigletService {
	rpc GetOne (ConfigletRequest) returns (ConfigletResponse);
	rpc GetSome (ConfigletSomeRequest) returns (stream ConfigletSomeResponse);
	rpc GetAll (ConfigletStreamRequest) returns (stream ConfigletStreamResponse);
	rpc Subscribe (ConfigletStreamRequest) returns (stream ConfigletStreamResponse);
	rpc GetMeta (ConfigletStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (ConfigletStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (ConfigletBatchedStreamRequest) returns (stream ConfigletBatchedStreamResponse);
	rpc SubscribeBatched (ConfigletBatchedStreamRequest) returns (stream ConfigletBatchedStreamResponse);
}

message ConfigletAssignmentRequest {
	// Key uniquely identifies a ConfigletAssignment instance to retrieve.
	// This value must be populated.
	ConfigletAssignmentKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ConfigletAssignmentResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ConfigletAssignment value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ConfigletAssignment instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ConfigletAssignmentSomeRequest {
	repeated ConfigletAssignmentKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ConfigletAssignmentSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ConfigletAssignment value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message ConfigletAssignmentStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ConfigletAssignment partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ConfigletAssignment at end.
	//     * Each ConfigletAssignment response is fully-specified (all fields set).
	//   * start: Returns the state of each ConfigletAssignment at start, followed by updates until now.
	//     * Each ConfigletAssignment response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ConfigletAssignment at start, followed by updates
	//     until end.
	//     * Each ConfigletAssignment response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ConfigletAssignmentStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ConfigletAssignment value = 1;

	// Time holds the timestamp of this ConfigletAssignment's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ConfigletAssignment value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message ConfigletAssignmentBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ConfigletAssignment partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ConfigletAssignment at end.
	//     * Each ConfigletAssignment response is fully-specified (all fields set).
	//   * start: Returns the state of each ConfigletAssignment at start, followed by updates until now.
	//     * Each ConfigletAssignment response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ConfigletAssignment at start, followed by updates
	//     until end.
	//     * Each ConfigletAssignment response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message ConfigletAssignmentBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated ConfigletAssignmentStreamResponse responses = 1;
};

service ConfigletAssignmentService {
	rpc GetOne (ConfigletAssignmentRequest) returns (ConfigletAssignmentResponse);
	rpc GetSome (ConfigletAssignmentSomeRequest) returns (stream ConfigletAssignmentSomeResponse);
	rpc GetAll (ConfigletAssignmentStreamRequest) returns (stream ConfigletAssignmentStreamResponse);
	rpc Subscribe (ConfigletAssignmentStreamRequest) returns (stream ConfigletAssignmentStreamResponse);
	rpc GetMeta (ConfigletAssignmentStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (ConfigletAssignmentStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (ConfigletAssignmentBatchedStreamRequest) returns (stream ConfigletAssignmentBatchedStreamResponse);
	rpc SubscribeBatched (ConfigletAssignmentBatchedStreamRequest) returns (stream ConfigletAssignmentBatchedStreamResponse);
}

message ConfigletAssignmentConfigRequest {
	// Key uniquely identifies a ConfigletAssignmentConfig instance to retrieve.
	// This value must be populated.
	ConfigletAssignmentKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ConfigletAssignmentConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ConfigletAssignmentConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ConfigletAssignmentConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ConfigletAssignmentConfigSomeRequest {
	repeated ConfigletAssignmentKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ConfigletAssignmentConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ConfigletAssignmentConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message ConfigletAssignmentConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ConfigletAssignmentConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ConfigletAssignmentConfig at end.
	//     * Each ConfigletAssignmentConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each ConfigletAssignmentConfig at start, followed by updates until now.
	//     * Each ConfigletAssignmentConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ConfigletAssignmentConfig at start, followed by updates
	//     until end.
	//     * Each ConfigletAssignmentConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ConfigletAssignmentConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ConfigletAssignmentConfig value = 1;

	// Time holds the timestamp of this ConfigletAssignmentConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ConfigletAssignmentConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message ConfigletAssignmentConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ConfigletAssignmentConfig partial_eq_filter = 1;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ConfigletAssignmentConfig at end.
	//     * Each ConfigletAssignmentConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each ConfigletAssignmentConfig at start, followed by updates until now.
	//     * Each ConfigletAssignmentConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ConfigletAssignmentConfig at start, followed by updates
	//     until end.
	//     * Each ConfigletAssignmentConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message ConfigletAssignmentConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated ConfigletAssignmentConfigStreamResponse responses = 1;
};

message ConfigletAssignmentConfigSetRequest {
	// ConfigletAssignmentConfig carries the value to set into the datastore.
	// See the documentation on the ConfigletAssignmentConfig struct for which fields are required.
	ConfigletAssignmentConfig value = 1;
};

message ConfigletAssignmentConfigSetResponse {
	// Value carries all the values given in the ConfigletAssignmentConfigSetRequest as well
	// as any server-generated values.
	ConfigletAssignmentConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ConfigletAssignmentConfigSetSomeRequest {
	// value contains a list of ConfigletAssignmentConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated ConfigletAssignmentConfig values = 1;
};

message ConfigletAssignmentConfigSetSomeResponse {
	ConfigletAssignmentKey key = 1;
	string error = 2;
};

message ConfigletAssignmentConfigDeleteRequest {
	// Key indicates which ConfigletAssignmentConfig instance to remove.
	// This field must always be set.
	ConfigletAssignmentKey key = 1;
};

message ConfigletAssignmentConfigDeleteResponse {
	// Key echoes back the key of the deleted ConfigletAssignmentConfig instance.
	ConfigletAssignmentKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ConfigletAssignmentConfigDeleteSomeRequest {
	// key contains a list of ConfigletAssignmentConfig keys to delete
	repeated ConfigletAssignmentKey keys = 1;
};

// ConfigletAssignmentConfigDeleteSomeResponse is only sent when there is an error.
message ConfigletAssignmentConfigDeleteSomeResponse {
	ConfigletAssignmentKey key = 1;
	string error = 2;
};

message ConfigletAssignmentConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated ConfigletAssignmentConfig partial_eq_filter = 1;
};

message ConfigletAssignmentConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the ConfigletAssignmentConfig instance that failed to be deleted.
	ConfigletAssignmentKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service ConfigletAssignmentConfigService {
	rpc GetOne (ConfigletAssignmentConfigRequest) returns (ConfigletAssignmentConfigResponse);
	rpc GetSome (ConfigletAssignmentConfigSomeRequest) returns (stream ConfigletAssignmentConfigSomeResponse);
	rpc GetAll (ConfigletAssignmentConfigStreamRequest) returns (stream ConfigletAssignmentConfigStreamResponse);
	rpc Subscribe (ConfigletAssignmentConfigStreamRequest) returns (stream ConfigletAssignmentConfigStreamResponse);
	rpc GetMeta (ConfigletAssignmentConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (ConfigletAssignmentConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (ConfigletAssignmentConfigSetRequest) returns (ConfigletAssignmentConfigSetResponse);
	rpc SetSome (ConfigletAssignmentConfigSetSomeRequest) returns (stream ConfigletAssignmentConfigSetSomeResponse);
	rpc Delete (ConfigletAssignmentConfigDeleteRequest) returns (ConfigletAssignmentConfigDeleteResponse);
	rpc DeleteSome (ConfigletAssignmentConfigDeleteSomeRequest) returns (stream ConfigletAssignmentConfigDeleteSomeResponse);
	rpc DeleteAll (ConfigletAssignmentConfigDeleteAllRequest) returns (stream ConfigletAssignmentConfigDeleteAllResponse);
	rpc GetAllBatched (ConfigletAssignmentConfigBatchedStreamRequest) returns (stream ConfigletAssignmentConfigBatchedStreamResponse);
	rpc SubscribeBatched (ConfigletAssignmentConfigBatchedStreamRequest) returns (stream ConfigletAssignmentConfigBatchedStreamResponse);
}

message ConfigletConfigRequest {
	// Key uniquely identifies a ConfigletConfig instance to retrieve.
	// This value must be populated.
	ConfigletKey key = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ConfigletConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ConfigletConfig value = 1;

	// Time carries the (UTC) timestamp of the last-modification of the
	// ConfigletConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};

message ConfigletConfigSomeRequest {
	repeated ConfigletKey keys = 1;

	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};

message ConfigletConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	ConfigletConfig value = 1;

	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};

message ConfigletConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ConfigletConfig partial_eq_filter = 1;
	// For each ConfigletConfig in the list, all populated fields are considered ANDed together
	// as a filtering operation. Similarly, the list itself is ORed such that any individual
	// filter that matches a given ConfigletConfig is streamed to the user.
	Filter filter = 2;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ConfigletConfig at end.
	//     * Each ConfigletConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each ConfigletConfig at start, followed by updates until now.
	//     * Each ConfigletConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ConfigletConfig at start, followed by updates
	//     until end.
	//     * Each ConfigletConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};

message ConfigletConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	ConfigletConfig value = 1;

	// Time holds the timestamp of this ConfigletConfig's last modification.
	google.protobuf.Timestamp time = 2;

	// Operation indicates how the ConfigletConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};

message ConfigletConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated ConfigletConfig partial_eq_filter = 1;
	// For each ConfigletConfig in the list, all populated fields are considered ANDed together
	// as a filtering operation. Similarly, the list itself is ORed such that any individual
	// filter that matches a given ConfigletConfig is streamed to the user.
	Filter filter = 2;

	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each ConfigletConfig at end.
	//     * Each ConfigletConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each ConfigletConfig at start, followed by updates until now.
	//     * Each ConfigletConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each ConfigletConfig at start, followed by updates
	//     until end.
	//     * Each ConfigletConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;

	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};

message ConfigletConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and 
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated ConfigletConfigStreamResponse responses = 1;
};

message ConfigletConfigSetRequest {
	// ConfigletConfig carries the value to set into the datastore.
	// See the documentation on the ConfigletConfig struct for which fields are required.
	ConfigletConfig value = 1;
};

message ConfigletConfigSetResponse {
	// Value carries all the values given in the ConfigletConfigSetRequest as well
	// as any server-generated values.
	ConfigletConfig value = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ConfigletConfigSetSomeRequest {
	// value contains a list of ConfigletConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated ConfigletConfig values = 1;
};

message ConfigletConfigSetSomeResponse {
	ConfigletKey key = 1;
	string error = 2;
};

message ConfigletConfigDeleteRequest {
	// Key indicates which ConfigletConfig instance to remove.
	// This field must always be set.
	ConfigletKey key = 1;
};

message ConfigletConfigDeleteResponse {
	// Key echoes back the key of the deleted ConfigletConfig instance.
	ConfigletKey key = 1;

	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};

message ConfigletConfigDeleteSomeRequest {
	// key contains a list of ConfigletConfig keys to delete
	repeated ConfigletKey keys = 1;
};

// ConfigletConfigDeleteSomeResponse is only sent when there is an error.
message ConfigletConfigDeleteSomeResponse {
	ConfigletKey key = 1;
	string error = 2;
};

message ConfigletConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated ConfigletConfig partial_eq_filter = 1;
	// For each ConfigletConfig in the list, all populated fields are considered ANDed together
	// as a filtering operation. Similarly, the list itself is ORed such that any individual
	// filter that matches a given ConfigletConfig will be deleted.
	Filter filter = 2;
};

message ConfigletConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the ConfigletConfig instance that failed to be deleted.
	ConfigletKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};

service ConfigletConfigService {
	rpc GetOne (ConfigletConfigRequest) returns (ConfigletConfigResponse);
	rpc GetSome (ConfigletConfigSomeRequest) returns (stream ConfigletConfigSomeResponse);
	rpc GetAll (ConfigletConfigStreamRequest) returns (stream ConfigletConfigStreamResponse);
	rpc Subscribe (ConfigletConfigStreamRequest) returns (stream ConfigletConfigStreamResponse);
	rpc GetMeta (ConfigletConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (ConfigletConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (ConfigletConfigSetRequest) returns (ConfigletConfigSetResponse);
	rpc SetSome (ConfigletConfigSetSomeRequest) returns (stream ConfigletConfigSetSomeResponse);
	rpc Delete (ConfigletConfigDeleteRequest) returns (ConfigletConfigDeleteResponse);
	rpc DeleteSome (ConfigletConfigDeleteSomeRequest) returns (stream ConfigletConfigDeleteSomeResponse);
	rpc DeleteAll (ConfigletConfigDeleteAllRequest) returns (stream ConfigletConfigDeleteAllResponse);
	rpc GetAllBatched (ConfigletConfigBatchedStreamRequest) returns (stream ConfigletConfigBatchedStreamResponse);
	rpc SubscribeBatched (ConfigletConfigBatchedStreamRequest) returns (stream ConfigletConfigBatchedStreamResponse);
}
